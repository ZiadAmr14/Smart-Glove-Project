
Flex_Sensor_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00002f34  00002fc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080008a  0080008a  00002ff2  2**0
                  ALLOC
  3 .stab         000022a4  00000000  00000000  00002ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000db6  00000000  00000000  00005298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000604e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000061ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000633d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008382  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009483  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a408  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a588  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a84a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b0d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3e 12 	call	0x247c	; 0x247c <main>
      8a:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7d 17 	jmp	0x2efa	; 0x2efa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e8       	ldi	r22, 0x82	; 130
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8d 17 	jmp	0x2f1a	; 0x2f1a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:
static void(*ADC_pfNotification)(u16) = NULL;
/* ADC busy flag */
static u8 ADC_u8BusyFlag = 0;

void ADC_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
		3- Disable/Enable AutoTrigger
		4- Select CLK
		5- Enable ADC
	 */
	 #if ADC_REFRENCE_SELECTION == ADC_u8_AVCC_WITH_CAPACITOR_AT_AREF
		CLRBIT(ADC_u8_ADMUX_REG,7);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	8c 93       	st	X, r24
		SETBit(ADC_u8_ADMUX_REG,6);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24
		SETBit(ADC_u8_ADMUX_REG,7);
		SETBit(ADC_u8_ADMUX_REG,6);
	 #endif
	
	#if ADC_RIGHT_LEFT_ADJUST == ADC_u8_RIGHT_ADJUST
		CLRBIT(ADC_u8_ADMUX_REG,5);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
	#elif ADC_RIGHT_LEFT_ADJUST == ADC_u8_LEFT_ADJUST
		SETBit(ADC_u8_ADMUX_REG,5);
	#endif
	
	#if ADC_AUTO_TRIGGER == ADC_u8_AUTO_TRIGGER_DISABLE
		CLRBIT(ADC_u8_ADCSRA_REG,5);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24
	#elif ADC_PRESCALAR_DIVISION_FACTOR == ADC_u8_DIVION_FACTOR32
		SETBit(ADC_u8_ADCSRA_REG,2);
		CLRBIT(ADC_u8_ADCSRA_REG,1);
		SETBit(ADC_u8_ADCSRA_REG,0);
	#elif ADC_PRESCALAR_DIVISION_FACTOR == ADC_u8_DIVION_FACTOR64
		SETBit(ADC_u8_ADCSRA_REG,2);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	84 60       	ori	r24, 0x04	; 4
     cea:	8c 93       	st	X, r24
		SETBit(ADC_u8_ADCSRA_REG,1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
		CLRBIT(ADC_u8_ADCSRA_REG,0);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	8c 93       	st	X, r24
		SETBit(ADC_u8_ADCSRA_REG,2);
		SETBit(ADC_u8_ADCSRA_REG,1);
		SETBit(ADC_u8_ADCSRA_REG,0);
	#endif
		
	SETBit(ADC_u8_ADCSRA_REG,7);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24
}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_u8GetDigitalValue>:

u8 ADC_u8GetDigitalValue(u8 Copy_u8ChannelNb, u16 * Copy_pu16DigitalValue)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <ADC_u8GetDigitalValue+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <ADC_u8GetDigitalValue+0x8>
     d24:	00 d0       	rcall	.+0      	; 0xd26 <ADC_u8GetDigitalValue+0xa>
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	8c 83       	std	Y+4, r24	; 0x04
     d2c:	7e 83       	std	Y+6, r23	; 0x06
     d2e:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	8b 83       	std	Y+3, r24	; 0x03
	u32 Local_u32TimeOutCounter = 0;
     d34:	1a 82       	std	Y+2, r1	; 0x02
     d36:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8ChannelNb < 32) && (Copy_pu16DigitalValue != NULL))
     d38:	8c 81       	ldd	r24, Y+4	; 0x04
     d3a:	80 32       	cpi	r24, 0x20	; 32
     d3c:	a8 f5       	brcc	.+106    	; 0xda8 <ADC_u8GetDigitalValue+0x8c>
     d3e:	8d 81       	ldd	r24, Y+5	; 0x05
     d40:	9e 81       	ldd	r25, Y+6	; 0x06
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	89 f1       	breq	.+98     	; 0xda8 <ADC_u8GetDigitalValue+0x8c>
	{
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     d46:	a7 e2       	ldi	r26, 0x27	; 39
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e7 e2       	ldi	r30, 0x27	; 39
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	80 7e       	andi	r24, 0xE0	; 224
     d52:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     d54:	a7 e2       	ldi	r26, 0x27	; 39
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e7 e2       	ldi	r30, 0x27	; 39
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	90 81       	ld	r25, Z
     d5e:	8c 81       	ldd	r24, Y+4	; 0x04
     d60:	89 2b       	or	r24, r25
     d62:	8c 93       	st	X, r24
		/* Start Conversion */
		SETBit(ADC_u8_ADCSRA_REG,6);
     d64:	a6 e2       	ldi	r26, 0x26	; 38
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e6 e2       	ldi	r30, 0x26	; 38
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 64       	ori	r24, 0x40	; 64
     d70:	8c 93       	st	X, r24
		/* Wait flag = 1 */
		while((GetBit(ADC_u8_ADCSRA_REG,4))== 0);
     d72:	e6 e2       	ldi	r30, 0x26	; 38
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	82 95       	swap	r24
     d7a:	8f 70       	andi	r24, 0x0F	; 15
     d7c:	88 2f       	mov	r24, r24
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	81 70       	andi	r24, 0x01	; 1
     d82:	90 70       	andi	r25, 0x00	; 0
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	a9 f3       	breq	.-22     	; 0xd72 <ADC_u8GetDigitalValue+0x56>
		/* Clear flag */
		SETBit(ADC_u8_ADCSRA_REG,4);
     d88:	a6 e2       	ldi	r26, 0x26	; 38
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e6 e2       	ldi	r30, 0x26	; 38
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	80 61       	ori	r24, 0x10	; 16
     d94:	8c 93       	st	X, r24
		/* Read the Digital Value */
		*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
     d96:	e4 e2       	ldi	r30, 0x24	; 36
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	91 81       	ldd	r25, Z+1	; 0x01
     d9e:	ed 81       	ldd	r30, Y+5	; 0x05
     da0:	fe 81       	ldd	r31, Y+6	; 0x06
     da2:	91 83       	std	Z+1, r25	; 0x01
     da4:	80 83       	st	Z, r24
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <ADC_u8GetDigitalValue+0x8e>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOT_OK;
     da8:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
     daa:	8b 81       	ldd	r24, Y+3	; 0x03

}
     dac:	26 96       	adiw	r28, 0x06	; 6
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <ADC_u8GetDigitalValueSynchNonBlocking>:

u8   ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNb, u16 * Copy_pu16DigitalValue)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	27 97       	sbiw	r28, 0x07	; 7
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	8c 83       	std	Y+4, r24	; 0x04
     dd4:	7e 83       	std	Y+6, r23	; 0x06
     dd6:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	8b 83       	std	Y+3, r24	; 0x03
	u32 Local_u32TimeOutCounter = 0;
     ddc:	1a 82       	std	Y+2, r1	; 0x02
     dde:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8ChannelNb < 32) && (Copy_pu16DigitalValue != NULL))
     de0:	8c 81       	ldd	r24, Y+4	; 0x04
     de2:	80 32       	cpi	r24, 0x20	; 32
     de4:	d0 f5       	brcc	.+116    	; 0xe5a <ADC_u8GetDigitalValueSynchNonBlocking+0x9c>
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	00 97       	sbiw	r24, 0x00	; 0
     dec:	b1 f1       	breq	.+108    	; 0xe5a <ADC_u8GetDigitalValueSynchNonBlocking+0x9c>
	{
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     dee:	a7 e2       	ldi	r26, 0x27	; 39
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e7 e2       	ldi	r30, 0x27	; 39
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	80 7e       	andi	r24, 0xE0	; 224
     dfa:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     dfc:	a7 e2       	ldi	r26, 0x27	; 39
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e7 e2       	ldi	r30, 0x27	; 39
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	90 81       	ld	r25, Z
     e06:	8c 81       	ldd	r24, Y+4	; 0x04
     e08:	89 2b       	or	r24, r25
     e0a:	8c 93       	st	X, r24
		/* Start Conversion */
		SETBit(ADC_u8_ADCSRA_REG,6);
     e0c:	a6 e2       	ldi	r26, 0x26	; 38
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e6 e2       	ldi	r30, 0x26	; 38
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	80 64       	ori	r24, 0x40	; 64
     e18:	8c 93       	st	X, r24
		/* Wait flag = 1 */
		while((GetBit(ADC_u8_ADCSRA_REG,4)== 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
     e1a:	e6 e2       	ldi	r30, 0x26	; 38
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
		{
			Local_u32TimeOutCounter++;
		}
		//while(!GET_BIT(ADC_u8_ADCSRA_REG,4));
		if(GetBit(ADC_u8_ADCSRA_REG,4)!= 0)//(Local_u32TimeOutCounter<ADC_u32_TIME_OUT_MAX_VALUE)
     e20:	e6 e2       	ldi	r30, 0x26	; 38
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	82 95       	swap	r24
     e28:	8f 70       	andi	r24, 0x0F	; 15
     e2a:	88 2f       	mov	r24, r24
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	81 70       	andi	r24, 0x01	; 1
     e30:	90 70       	andi	r25, 0x00	; 0
     e32:	88 23       	and	r24, r24
     e34:	81 f0       	breq	.+32     	; 0xe56 <ADC_u8GetDigitalValueSynchNonBlocking+0x98>
		{
			/* Clear flag */
			SETBit(ADC_u8_ADCSRA_REG,4);
     e36:	a6 e2       	ldi	r26, 0x26	; 38
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e6 e2       	ldi	r30, 0x26	; 38
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 61       	ori	r24, 0x10	; 16
     e42:	8c 93       	st	X, r24
			/* Read the Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
     e44:	e4 e2       	ldi	r30, 0x24	; 36
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	ed 81       	ldd	r30, Y+5	; 0x05
     e4e:	fe 81       	ldd	r31, Y+6	; 0x06
     e50:	91 83       	std	Z+1, r25	; 0x01
     e52:	80 83       	st	Z, r24
     e54:	03 c0       	rjmp	.+6      	; 0xe5c <ADC_u8GetDigitalValueSynchNonBlocking+0x9e>
		}
		else
		{
			Local_u8ErrorState = STD_TYPES_NOT_OK;
     e56:	1b 82       	std	Y+3, r1	; 0x03
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <ADC_u8GetDigitalValueSynchNonBlocking+0x9e>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOT_OK;
     e5a:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
}
     e5e:	27 96       	adiw	r28, 0x07	; 7
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	f8 94       	cli
     e64:	de bf       	out	0x3e, r29	; 62
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	cd bf       	out	0x3d, r28	; 61
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <ADC_u8GetDigitalValueAsynch>:
u8   ADC_u8GetDigitalValueAsynch          (u8 Copy_u8ChannelNb,void(*Copy_pfNotification)(u16))
{
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	00 d0       	rcall	.+0      	; 0xe76 <ADC_u8GetDigitalValueAsynch+0x6>
     e76:	00 d0       	rcall	.+0      	; 0xe78 <ADC_u8GetDigitalValueAsynch+0x8>
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	8a 83       	std	Y+2, r24	; 0x02
     e7e:	7c 83       	std	Y+4, r23	; 0x04
     e80:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32) && (Copy_pfNotification != NULL) && (ADC_u8BusyFlag == 0))
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	80 32       	cpi	r24, 0x20	; 32
     e8a:	78 f5       	brcc	.+94     	; 0xeea <ADC_u8GetDigitalValueAsynch+0x7a>
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	9c 81       	ldd	r25, Y+4	; 0x04
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	59 f1       	breq	.+86     	; 0xeea <ADC_u8GetDigitalValueAsynch+0x7a>
     e94:	80 91 8c 00 	lds	r24, 0x008C
     e98:	88 23       	and	r24, r24
     e9a:	39 f5       	brne	.+78     	; 0xeea <ADC_u8GetDigitalValueAsynch+0x7a>
	{
		/* Set Flag to make ADC is Busy */
		ADC_u8BusyFlag = 1;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	80 93 8c 00 	sts	0x008C, r24
		/* update Global Pointer to a function */
		ADC_pfNotification = Copy_pfNotification;
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	9c 81       	ldd	r25, Y+4	; 0x04
     ea6:	90 93 8b 00 	sts	0x008B, r25
     eaa:	80 93 8a 00 	sts	0x008A, r24
		/* Enable ADC Interrupt */
		SETBit(ADC_u8_ADCSRA_REG,3);
     eae:	a6 e2       	ldi	r26, 0x26	; 38
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e6 e2       	ldi	r30, 0x26	; 38
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	88 60       	ori	r24, 0x08	; 8
     eba:	8c 93       	st	X, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     ebc:	a7 e2       	ldi	r26, 0x27	; 39
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e7 e2       	ldi	r30, 0x27	; 39
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 7e       	andi	r24, 0xE0	; 224
     ec8:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     eca:	a7 e2       	ldi	r26, 0x27	; 39
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e7 e2       	ldi	r30, 0x27	; 39
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	90 81       	ld	r25, Z
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	89 2b       	or	r24, r25
     ed8:	8c 93       	st	X, r24
		/* Start Conversion */
		SETBit(ADC_u8_ADCSRA_REG,6);
     eda:	a6 e2       	ldi	r26, 0x26	; 38
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e6 e2       	ldi	r30, 0x26	; 38
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	80 64       	ori	r24, 0x40	; 64
     ee6:	8c 93       	st	X, r24
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <ADC_u8GetDigitalValueAsynch+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOT_OK;
     eea:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     eec:	89 81       	ldd	r24, Y+1	; 0x01
}
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <ADC_u8GetADCRegValue>:
u8   ADC_u8GetADCRegValue                 (u16 * Copy_pu16ADCValue)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <ADC_u8GetADCRegValue+0x6>
     f02:	0f 92       	push	r0
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	9b 83       	std	Y+3, r25	; 0x03
     f0a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCValue != NULL)
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	49 f0       	breq	.+18     	; 0xf2a <ADC_u8GetADCRegValue+0x2e>
	{
		/* Read ADC Register */
		*Copy_pu16ADCValue = ADC_u16_ADC_REG;
     f18:	e4 e2       	ldi	r30, 0x24	; 36
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	91 81       	ldd	r25, Z+1	; 0x01
     f20:	ea 81       	ldd	r30, Y+2	; 0x02
     f22:	fb 81       	ldd	r31, Y+3	; 0x03
     f24:	91 83       	std	Z+1, r25	; 0x01
     f26:	80 83       	st	Z, r24
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <ADC_u8GetADCRegValue+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOT_OK;
     f2a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState ;
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <__vector_16>:

/* Prototype for ADC ISR */
void __vector_16(void)     __attribute__((signal));
void __vector_16(void)
{
     f3a:	1f 92       	push	r1
     f3c:	0f 92       	push	r0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	0f 92       	push	r0
     f42:	11 24       	eor	r1, r1
     f44:	2f 93       	push	r18
     f46:	3f 93       	push	r19
     f48:	4f 93       	push	r20
     f4a:	5f 93       	push	r21
     f4c:	6f 93       	push	r22
     f4e:	7f 93       	push	r23
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	af 93       	push	r26
     f56:	bf 93       	push	r27
     f58:	ef 93       	push	r30
     f5a:	ff 93       	push	r31
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
     f64:	80 91 8a 00 	lds	r24, 0x008A
     f68:	90 91 8b 00 	lds	r25, 0x008B
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	99 f0       	breq	.+38     	; 0xf96 <__vector_16+0x5c>
	{
		/* Clear Flag */
		ADC_u8BusyFlag = 0;
     f70:	10 92 8c 00 	sts	0x008C, r1
		/* Clear PIE of ADC */
		CLRBIT(ADC_u8_ADCSRA_REG,3);
     f74:	a6 e2       	ldi	r26, 0x26	; 38
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e6 e2       	ldi	r30, 0x26	; 38
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	87 7f       	andi	r24, 0xF7	; 247
     f80:	8c 93       	st	X, r24
		/* Calling Notification function */
		ADC_pfNotification(ADC_u16_ADC_REG);
     f82:	20 91 8a 00 	lds	r18, 0x008A
     f86:	30 91 8b 00 	lds	r19, 0x008B
     f8a:	e4 e2       	ldi	r30, 0x24	; 36
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	91 81       	ldd	r25, Z+1	; 0x01
     f92:	f9 01       	movw	r30, r18
     f94:	09 95       	icall
	}
}
     f96:	cf 91       	pop	r28
     f98:	df 91       	pop	r29
     f9a:	ff 91       	pop	r31
     f9c:	ef 91       	pop	r30
     f9e:	bf 91       	pop	r27
     fa0:	af 91       	pop	r26
     fa2:	9f 91       	pop	r25
     fa4:	8f 91       	pop	r24
     fa6:	7f 91       	pop	r23
     fa8:	6f 91       	pop	r22
     faa:	5f 91       	pop	r21
     fac:	4f 91       	pop	r20
     fae:	3f 91       	pop	r19
     fb0:	2f 91       	pop	r18
     fb2:	0f 90       	pop	r0
     fb4:	0f be       	out	0x3f, r0	; 63
     fb6:	0f 90       	pop	r0
     fb8:	1f 90       	pop	r1
     fba:	18 95       	reti

00000fbc <DioInit>:
#include"DIO_Interface.h"
#include"DIO_Private.h"
#include"DIO_Configuration.h"

void DioInit()
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION
     fc4:	ea e3       	ldi	r30, 0x3A	; 58
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	10 82       	st	Z, r1
	,DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION);
	
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,DIO_u8_PB4_DIRECTION,
     fca:	e7 e3       	ldi	r30, 0x37	; 55
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	8f ef       	ldi	r24, 0xFF	; 255
     fd0:	80 83       	st	Z, r24
		DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION);
		
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,DIO_u8_PC4_DIRECTION,
     fd2:	e4 e3       	ldi	r30, 0x34	; 52
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	87 e0       	ldi	r24, 0x07	; 7
     fd8:	80 83       	st	Z, r24
		DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION);
		
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,DIO_u8_PD4_DIRECTION,
     fda:	e1 e3       	ldi	r30, 0x31	; 49
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	10 82       	st	Z, r1
		DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION);
		
		
	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_Value,DIO_u8_PA6_Value,DIO_u8_PA5_Value,DIO_u8_PA4_Value,DIO_u8_PA3_Value,DIO_u8_PA2_Value,
     fe0:	eb e3       	ldi	r30, 0x3B	; 59
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	10 82       	st	Z, r1
	DIO_u8_PA1_Value,DIO_u8_PA0_Value);
	
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_Value,DIO_u8_PB6_Value,DIO_u8_PB5_Value,DIO_u8_PB4_Value,DIO_u8_PB3_Value,DIO_u8_PB2_Value,
     fe6:	e8 e3       	ldi	r30, 0x38	; 56
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	10 82       	st	Z, r1
	DIO_u8_PB1_Value,DIO_u8_PB0_Value);
	
	
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_Value,DIO_u8_PC6_Value,DIO_u8_PC5_Value,DIO_u8_PC4_Value,DIO_u8_PC3_Value,DIO_u8_PC2_Value,
     fec:	e5 e3       	ldi	r30, 0x35	; 53
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	10 82       	st	Z, r1
	DIO_u8_PC1_Value,DIO_u8_PC0_Value);
	
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_Value,DIO_u8_PD6_Value,DIO_u8_PD5_Value,DIO_u8_PD4_Value,DIO_u8_PD3_Value,DIO_u8_PD2_Value,
     ff2:	e2 e3       	ldi	r30, 0x32	; 50
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	10 82       	st	Z, r1
	
	
		
		
	
}
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	2e 97       	sbiw	r28, 0x0e	; 14
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	8a 83       	std	Y+2, r24	; 0x02
    1014:	6b 83       	std	Y+3, r22	; 0x03
    1016:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<=DIO_u8_PIN7) &&( (Copy_u8PinDirection == DIO_u8_OUTPUT)||(Copy_u8PinDirection == DIO_u8_INPUT)))
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	08 f0       	brcs	.+2      	; 0x1024 <DIO_u8SetPinDirection+0x26>
    1022:	0c c1       	rjmp	.+536    	; 0x123c <DIO_u8SetPinDirection+0x23e>
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	88 30       	cpi	r24, 0x08	; 8
    1028:	08 f0       	brcs	.+2      	; 0x102c <DIO_u8SetPinDirection+0x2e>
    102a:	08 c1       	rjmp	.+528    	; 0x123c <DIO_u8SetPinDirection+0x23e>
    102c:	8c 81       	ldd	r24, Y+4	; 0x04
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	21 f0       	breq	.+8      	; 0x103a <DIO_u8SetPinDirection+0x3c>
    1032:	8c 81       	ldd	r24, Y+4	; 0x04
    1034:	88 23       	and	r24, r24
    1036:	09 f0       	breq	.+2      	; 0x103a <DIO_u8SetPinDirection+0x3c>
    1038:	01 c1       	rjmp	.+514    	; 0x123c <DIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortId)
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	3e 87       	std	Y+14, r19	; 0x0e
    1042:	2d 87       	std	Y+13, r18	; 0x0d
    1044:	8d 85       	ldd	r24, Y+13	; 0x0d
    1046:	9e 85       	ldd	r25, Y+14	; 0x0e
    1048:	81 30       	cpi	r24, 0x01	; 1
    104a:	91 05       	cpc	r25, r1
    104c:	09 f4       	brne	.+2      	; 0x1050 <DIO_u8SetPinDirection+0x52>
    104e:	4f c0       	rjmp	.+158    	; 0x10ee <DIO_u8SetPinDirection+0xf0>
    1050:	2d 85       	ldd	r18, Y+13	; 0x0d
    1052:	3e 85       	ldd	r19, Y+14	; 0x0e
    1054:	22 30       	cpi	r18, 0x02	; 2
    1056:	31 05       	cpc	r19, r1
    1058:	2c f4       	brge	.+10     	; 0x1064 <DIO_u8SetPinDirection+0x66>
    105a:	8d 85       	ldd	r24, Y+13	; 0x0d
    105c:	9e 85       	ldd	r25, Y+14	; 0x0e
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	71 f0       	breq	.+28     	; 0x107e <DIO_u8SetPinDirection+0x80>
    1062:	ed c0       	rjmp	.+474    	; 0x123e <DIO_u8SetPinDirection+0x240>
    1064:	2d 85       	ldd	r18, Y+13	; 0x0d
    1066:	3e 85       	ldd	r19, Y+14	; 0x0e
    1068:	22 30       	cpi	r18, 0x02	; 2
    106a:	31 05       	cpc	r19, r1
    106c:	09 f4       	brne	.+2      	; 0x1070 <DIO_u8SetPinDirection+0x72>
    106e:	77 c0       	rjmp	.+238    	; 0x115e <DIO_u8SetPinDirection+0x160>
    1070:	8d 85       	ldd	r24, Y+13	; 0x0d
    1072:	9e 85       	ldd	r25, Y+14	; 0x0e
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	09 f4       	brne	.+2      	; 0x107c <DIO_u8SetPinDirection+0x7e>
    107a:	a9 c0       	rjmp	.+338    	; 0x11ce <DIO_u8SetPinDirection+0x1d0>
    107c:	e0 c0       	rjmp	.+448    	; 0x123e <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	3c 87       	std	Y+12, r19	; 0x0c
    1086:	2b 87       	std	Y+11, r18	; 0x0b
    1088:	8b 85       	ldd	r24, Y+11	; 0x0b
    108a:	9c 85       	ldd	r25, Y+12	; 0x0c
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	d1 f0       	breq	.+52     	; 0x10c4 <DIO_u8SetPinDirection+0xc6>
    1090:	2b 85       	ldd	r18, Y+11	; 0x0b
    1092:	3c 85       	ldd	r19, Y+12	; 0x0c
    1094:	21 30       	cpi	r18, 0x01	; 1
    1096:	31 05       	cpc	r19, r1
    1098:	09 f0       	breq	.+2      	; 0x109c <DIO_u8SetPinDirection+0x9e>
    109a:	d1 c0       	rjmp	.+418    	; 0x123e <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
					SETBit(DIO_u8_DDRA_REG,Copy_u8PinId);
    109c:	aa e3       	ldi	r26, 0x3A	; 58
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	ea e3       	ldi	r30, 0x3A	; 58
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DIO_u8SetPinDirection+0xbc>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <DIO_u8SetPinDirection+0xb8>
    10be:	84 2b       	or	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	bd c0       	rjmp	.+378    	; 0x123e <DIO_u8SetPinDirection+0x240>
					break;
				case DIO_u8_INPUT:
					CLRBIT(DIO_u8_DDRA_REG,Copy_u8PinId);
    10c4:	aa e3       	ldi	r26, 0x3A	; 58
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	ea e3       	ldi	r30, 0x3A	; 58
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <DIO_u8SetPinDirection+0xe4>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <DIO_u8SetPinDirection+0xe0>
    10e6:	80 95       	com	r24
    10e8:	84 23       	and	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	a8 c0       	rjmp	.+336    	; 0x123e <DIO_u8SetPinDirection+0x240>
					break;
				
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	3a 87       	std	Y+10, r19	; 0x0a
    10f6:	29 87       	std	Y+9, r18	; 0x09
    10f8:	89 85       	ldd	r24, Y+9	; 0x09
    10fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	d1 f0       	breq	.+52     	; 0x1134 <DIO_u8SetPinDirection+0x136>
    1100:	29 85       	ldd	r18, Y+9	; 0x09
    1102:	3a 85       	ldd	r19, Y+10	; 0x0a
    1104:	21 30       	cpi	r18, 0x01	; 1
    1106:	31 05       	cpc	r19, r1
    1108:	09 f0       	breq	.+2      	; 0x110c <DIO_u8SetPinDirection+0x10e>
    110a:	99 c0       	rjmp	.+306    	; 0x123e <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
					SETBit(DIO_u8_DDRB_REG,Copy_u8PinId);
    110c:	a7 e3       	ldi	r26, 0x37	; 55
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e7 e3       	ldi	r30, 0x37	; 55
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_u8SetPinDirection+0x12c>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_u8SetPinDirection+0x128>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	85 c0       	rjmp	.+266    	; 0x123e <DIO_u8SetPinDirection+0x240>
					break;
				case DIO_u8_INPUT:
					CLRBIT(DIO_u8_DDRB_REG,Copy_u8PinId);
    1134:	a7 e3       	ldi	r26, 0x37	; 55
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e7 e3       	ldi	r30, 0x37	; 55
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_u8SetPinDirection+0x154>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_u8SetPinDirection+0x150>
    1156:	80 95       	com	r24
    1158:	84 23       	and	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	70 c0       	rjmp	.+224    	; 0x123e <DIO_u8SetPinDirection+0x240>
					break;
				
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	38 87       	std	Y+8, r19	; 0x08
    1166:	2f 83       	std	Y+7, r18	; 0x07
    1168:	8f 81       	ldd	r24, Y+7	; 0x07
    116a:	98 85       	ldd	r25, Y+8	; 0x08
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	d1 f0       	breq	.+52     	; 0x11a4 <DIO_u8SetPinDirection+0x1a6>
    1170:	2f 81       	ldd	r18, Y+7	; 0x07
    1172:	38 85       	ldd	r19, Y+8	; 0x08
    1174:	21 30       	cpi	r18, 0x01	; 1
    1176:	31 05       	cpc	r19, r1
    1178:	09 f0       	breq	.+2      	; 0x117c <DIO_u8SetPinDirection+0x17e>
    117a:	61 c0       	rjmp	.+194    	; 0x123e <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
					SETBit(DIO_u8_DDRC_REG,Copy_u8PinId);
    117c:	a4 e3       	ldi	r26, 0x34	; 52
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e4 e3       	ldi	r30, 0x34	; 52
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <DIO_u8SetPinDirection+0x19c>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <DIO_u8SetPinDirection+0x198>
    119e:	84 2b       	or	r24, r20
    11a0:	8c 93       	st	X, r24
    11a2:	4d c0       	rjmp	.+154    	; 0x123e <DIO_u8SetPinDirection+0x240>
					break;
				case DIO_u8_INPUT:
					CLRBIT(DIO_u8_DDRC_REG,Copy_u8PinId);
    11a4:	a4 e3       	ldi	r26, 0x34	; 52
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	e4 e3       	ldi	r30, 0x34	; 52
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 2e       	mov	r0, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_u8SetPinDirection+0x1c4>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <DIO_u8SetPinDirection+0x1c0>
    11c6:	80 95       	com	r24
    11c8:	84 23       	and	r24, r20
    11ca:	8c 93       	st	X, r24
    11cc:	38 c0       	rjmp	.+112    	; 0x123e <DIO_u8SetPinDirection+0x240>
					break;
				
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	3e 83       	std	Y+6, r19	; 0x06
    11d6:	2d 83       	std	Y+5, r18	; 0x05
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	c9 f0       	breq	.+50     	; 0x1212 <DIO_u8SetPinDirection+0x214>
    11e0:	2d 81       	ldd	r18, Y+5	; 0x05
    11e2:	3e 81       	ldd	r19, Y+6	; 0x06
    11e4:	21 30       	cpi	r18, 0x01	; 1
    11e6:	31 05       	cpc	r19, r1
    11e8:	51 f5       	brne	.+84     	; 0x123e <DIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
					SETBit(DIO_u8_DDRD_REG,Copy_u8PinId);
    11ea:	a1 e3       	ldi	r26, 0x31	; 49
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e1 e3       	ldi	r30, 0x31	; 49
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	48 2f       	mov	r20, r24
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	02 2e       	mov	r0, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <DIO_u8SetPinDirection+0x20a>
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	0a 94       	dec	r0
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <DIO_u8SetPinDirection+0x206>
    120c:	84 2b       	or	r24, r20
    120e:	8c 93       	st	X, r24
    1210:	16 c0       	rjmp	.+44     	; 0x123e <DIO_u8SetPinDirection+0x240>
					break;
				case DIO_u8_INPUT:
					CLRBIT(DIO_u8_DDRD_REG,Copy_u8PinId);
    1212:	a1 e3       	ldi	r26, 0x31	; 49
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e1 e3       	ldi	r30, 0x31	; 49
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	48 2f       	mov	r20, r24
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	02 2e       	mov	r0, r18
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <DIO_u8SetPinDirection+0x232>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	0a 94       	dec	r0
    1232:	e2 f7       	brpl	.-8      	; 0x122c <DIO_u8SetPinDirection+0x22e>
    1234:	80 95       	com	r24
    1236:	84 23       	and	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	01 c0       	rjmp	.+2      	; 0x123e <DIO_u8SetPinDirection+0x240>
		}
	}
	
	else
	{
		Local_u8ErrorState = STD_TYPES_NOT_OK;
    123c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    123e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1240:	2e 96       	adiw	r28, 0x0e	; 14
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinValue)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	2e 97       	sbiw	r28, 0x0e	; 14
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	8a 83       	std	Y+2, r24	; 0x02
    1268:	6b 83       	std	Y+3, r22	; 0x03
    126a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId<=DIO_u8_PIN7)
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	88 30       	cpi	r24, 0x08	; 8
    1274:	08 f0       	brcs	.+2      	; 0x1278 <DIO_u8SetPinValue+0x26>
    1276:	08 c1       	rjmp	.+528    	; 0x1488 <DIO_u8SetPinValue+0x236>
	{
		switch(Copy_u8PortId)
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	3e 87       	std	Y+14, r19	; 0x0e
    1280:	2d 87       	std	Y+13, r18	; 0x0d
    1282:	8d 85       	ldd	r24, Y+13	; 0x0d
    1284:	9e 85       	ldd	r25, Y+14	; 0x0e
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	91 05       	cpc	r25, r1
    128a:	09 f4       	brne	.+2      	; 0x128e <DIO_u8SetPinValue+0x3c>
    128c:	50 c0       	rjmp	.+160    	; 0x132e <DIO_u8SetPinValue+0xdc>
    128e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1290:	3e 85       	ldd	r19, Y+14	; 0x0e
    1292:	22 30       	cpi	r18, 0x02	; 2
    1294:	31 05       	cpc	r19, r1
    1296:	2c f4       	brge	.+10     	; 0x12a2 <DIO_u8SetPinValue+0x50>
    1298:	8d 85       	ldd	r24, Y+13	; 0x0d
    129a:	9e 85       	ldd	r25, Y+14	; 0x0e
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	71 f0       	breq	.+28     	; 0x12bc <DIO_u8SetPinValue+0x6a>
    12a0:	f1 c0       	rjmp	.+482    	; 0x1484 <DIO_u8SetPinValue+0x232>
    12a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    12a4:	3e 85       	ldd	r19, Y+14	; 0x0e
    12a6:	22 30       	cpi	r18, 0x02	; 2
    12a8:	31 05       	cpc	r19, r1
    12aa:	09 f4       	brne	.+2      	; 0x12ae <DIO_u8SetPinValue+0x5c>
    12ac:	79 c0       	rjmp	.+242    	; 0x13a0 <DIO_u8SetPinValue+0x14e>
    12ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b2:	83 30       	cpi	r24, 0x03	; 3
    12b4:	91 05       	cpc	r25, r1
    12b6:	09 f4       	brne	.+2      	; 0x12ba <DIO_u8SetPinValue+0x68>
    12b8:	ac c0       	rjmp	.+344    	; 0x1412 <DIO_u8SetPinValue+0x1c0>
    12ba:	e4 c0       	rjmp	.+456    	; 0x1484 <DIO_u8SetPinValue+0x232>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	3c 87       	std	Y+12, r19	; 0x0c
    12c4:	2b 87       	std	Y+11, r18	; 0x0b
    12c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    12c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    12ca:	00 97       	sbiw	r24, 0x00	; 0
    12cc:	c9 f0       	breq	.+50     	; 0x1300 <DIO_u8SetPinValue+0xae>
    12ce:	2b 85       	ldd	r18, Y+11	; 0x0b
    12d0:	3c 85       	ldd	r19, Y+12	; 0x0c
    12d2:	21 30       	cpi	r18, 0x01	; 1
    12d4:	31 05       	cpc	r19, r1
    12d6:	49 f5       	brne	.+82     	; 0x132a <DIO_u8SetPinValue+0xd8>
				{
					case DIO_u8_HIGH:
						SETBit(DIO_u8_PORTA_REG,Copy_u8PinId);
    12d8:	ab e3       	ldi	r26, 0x3B	; 59
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	eb e3       	ldi	r30, 0x3B	; 59
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_u8SetPinValue+0xa4>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_u8SetPinValue+0xa0>
    12fa:	84 2b       	or	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	c5 c0       	rjmp	.+394    	; 0x148a <DIO_u8SetPinValue+0x238>
						break;
					
					case DIO_u8_LOW:
						CLRBIT(DIO_u8_PORTA_REG,Copy_u8PinId);
    1300:	ab e3       	ldi	r26, 0x3B	; 59
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	eb e3       	ldi	r30, 0x3B	; 59
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <DIO_u8SetPinValue+0xcc>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <DIO_u8SetPinValue+0xc8>
    1322:	80 95       	com	r24
    1324:	84 23       	and	r24, r20
    1326:	8c 93       	st	X, r24
    1328:	b0 c0       	rjmp	.+352    	; 0x148a <DIO_u8SetPinValue+0x238>
						break;
					
					default:
						Local_u8ErrorState=STD_TYPES_NOT_OK;
    132a:	19 82       	std	Y+1, r1	; 0x01
    132c:	ae c0       	rjmp	.+348    	; 0x148a <DIO_u8SetPinValue+0x238>
				}
				break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
    132e:	8c 81       	ldd	r24, Y+4	; 0x04
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3a 87       	std	Y+10, r19	; 0x0a
    1336:	29 87       	std	Y+9, r18	; 0x09
    1338:	89 85       	ldd	r24, Y+9	; 0x09
    133a:	9a 85       	ldd	r25, Y+10	; 0x0a
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	c9 f0       	breq	.+50     	; 0x1372 <DIO_u8SetPinValue+0x120>
    1340:	29 85       	ldd	r18, Y+9	; 0x09
    1342:	3a 85       	ldd	r19, Y+10	; 0x0a
    1344:	21 30       	cpi	r18, 0x01	; 1
    1346:	31 05       	cpc	r19, r1
    1348:	49 f5       	brne	.+82     	; 0x139c <DIO_u8SetPinValue+0x14a>
				{
					case DIO_u8_HIGH:
						SETBit(DIO_u8_PORTB_REG,Copy_u8PinId);
    134a:	a8 e3       	ldi	r26, 0x38	; 56
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e8 e3       	ldi	r30, 0x38	; 56
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_u8SetPinValue+0x116>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_u8SetPinValue+0x112>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	8c c0       	rjmp	.+280    	; 0x148a <DIO_u8SetPinValue+0x238>
						break;
					
					case DIO_u8_LOW:
						CLRBIT(DIO_u8_PORTB_REG,Copy_u8PinId);
    1372:	a8 e3       	ldi	r26, 0x38	; 56
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e8 e3       	ldi	r30, 0x38	; 56
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_u8SetPinValue+0x13e>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_u8SetPinValue+0x13a>
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	77 c0       	rjmp	.+238    	; 0x148a <DIO_u8SetPinValue+0x238>
						break;
					
					default:
						Local_u8ErrorState=STD_TYPES_NOT_OK;
    139c:	19 82       	std	Y+1, r1	; 0x01
    139e:	75 c0       	rjmp	.+234    	; 0x148a <DIO_u8SetPinValue+0x238>
				
				
			
				break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
    13a0:	8c 81       	ldd	r24, Y+4	; 0x04
    13a2:	28 2f       	mov	r18, r24
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	38 87       	std	Y+8, r19	; 0x08
    13a8:	2f 83       	std	Y+7, r18	; 0x07
    13aa:	8f 81       	ldd	r24, Y+7	; 0x07
    13ac:	98 85       	ldd	r25, Y+8	; 0x08
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	c9 f0       	breq	.+50     	; 0x13e4 <DIO_u8SetPinValue+0x192>
    13b2:	2f 81       	ldd	r18, Y+7	; 0x07
    13b4:	38 85       	ldd	r19, Y+8	; 0x08
    13b6:	21 30       	cpi	r18, 0x01	; 1
    13b8:	31 05       	cpc	r19, r1
    13ba:	49 f5       	brne	.+82     	; 0x140e <DIO_u8SetPinValue+0x1bc>
				{
					case DIO_u8_HIGH:
						SETBit(DIO_u8_PORTC_REG,Copy_u8PinId);
    13bc:	a5 e3       	ldi	r26, 0x35	; 53
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e5 e3       	ldi	r30, 0x35	; 53
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_u8SetPinValue+0x188>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_u8SetPinValue+0x184>
    13de:	84 2b       	or	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	53 c0       	rjmp	.+166    	; 0x148a <DIO_u8SetPinValue+0x238>
						break;
					
					case DIO_u8_LOW:
						CLRBIT(DIO_u8_PORTC_REG,Copy_u8PinId);
    13e4:	a5 e3       	ldi	r26, 0x35	; 53
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e5 e3       	ldi	r30, 0x35	; 53
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_u8SetPinValue+0x1b0>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_u8SetPinValue+0x1ac>
    1406:	80 95       	com	r24
    1408:	84 23       	and	r24, r20
    140a:	8c 93       	st	X, r24
    140c:	3e c0       	rjmp	.+124    	; 0x148a <DIO_u8SetPinValue+0x238>
						break;
					
					default:
						Local_u8ErrorState=STD_TYPES_NOT_OK;
    140e:	19 82       	std	Y+1, r1	; 0x01
    1410:	3c c0       	rjmp	.+120    	; 0x148a <DIO_u8SetPinValue+0x238>
				}
			
				break;
				
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	3e 83       	std	Y+6, r19	; 0x06
    141a:	2d 83       	std	Y+5, r18	; 0x05
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	c9 f0       	breq	.+50     	; 0x1456 <DIO_u8SetPinValue+0x204>
    1424:	2d 81       	ldd	r18, Y+5	; 0x05
    1426:	3e 81       	ldd	r19, Y+6	; 0x06
    1428:	21 30       	cpi	r18, 0x01	; 1
    142a:	31 05       	cpc	r19, r1
    142c:	49 f5       	brne	.+82     	; 0x1480 <DIO_u8SetPinValue+0x22e>
				{
					case DIO_u8_HIGH:
						SETBit(DIO_u8_PORTD_REG,Copy_u8PinId);
    142e:	a2 e3       	ldi	r26, 0x32	; 50
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e2 e3       	ldi	r30, 0x32	; 50
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	48 2f       	mov	r20, r24
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 2e       	mov	r0, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <DIO_u8SetPinValue+0x1fa>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	0a 94       	dec	r0
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <DIO_u8SetPinValue+0x1f6>
    1450:	84 2b       	or	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	1a c0       	rjmp	.+52     	; 0x148a <DIO_u8SetPinValue+0x238>
						break;
					
					case DIO_u8_LOW:
						CLRBIT(DIO_u8_PORTD_REG,Copy_u8PinId);
    1456:	a2 e3       	ldi	r26, 0x32	; 50
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e2 e3       	ldi	r30, 0x32	; 50
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 2e       	mov	r0, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <DIO_u8SetPinValue+0x222>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	0a 94       	dec	r0
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <DIO_u8SetPinValue+0x21e>
    1478:	80 95       	com	r24
    147a:	84 23       	and	r24, r20
    147c:	8c 93       	st	X, r24
    147e:	05 c0       	rjmp	.+10     	; 0x148a <DIO_u8SetPinValue+0x238>
						break;
					
					default:
						Local_u8ErrorState=STD_TYPES_NOT_OK;
    1480:	19 82       	std	Y+1, r1	; 0x01
    1482:	03 c0       	rjmp	.+6      	; 0x148a <DIO_u8SetPinValue+0x238>
				}
			
				break;
				
			default:
				Local_u8ErrorState=STD_TYPES_NOT_OK;	
    1484:	19 82       	std	Y+1, r1	; 0x01
    1486:	01 c0       	rjmp	.+2      	; 0x148a <DIO_u8SetPinValue+0x238>
		}
		
	}
	else
	{
		Local_u8ErrorState=STD_TYPES_NOT_OK;
    1488:	19 82       	std	Y+1, r1	; 0x01
	}
	
	
	return Local_u8ErrorState;
    148a:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    148c:	2e 96       	adiw	r28, 0x0e	; 14
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId , u8 Copy_u8PinId , u8* Copy_Pu8ReturnedPinValue)
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	28 97       	sbiw	r28, 0x08	; 8
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	8b 83       	std	Y+3, r24	; 0x03
    14b4:	6c 83       	std	Y+4, r22	; 0x04
    14b6:	5e 83       	std	Y+6, r21	; 0x06
    14b8:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState=STD_TYPES_OK;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId<=DIO_u8_PORTD) && (Copy_u8PinId<=DIO_u8_PIN7) && (Copy_Pu8ReturnedPinValue!=NULL))
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	84 30       	cpi	r24, 0x04	; 4
    14c2:	08 f0       	brcs	.+2      	; 0x14c6 <DIO_u8GetPinValue+0x28>
    14c4:	9f c0       	rjmp	.+318    	; 0x1604 <DIO_u8GetPinValue+0x166>
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	88 30       	cpi	r24, 0x08	; 8
    14ca:	08 f0       	brcs	.+2      	; 0x14ce <DIO_u8GetPinValue+0x30>
    14cc:	9b c0       	rjmp	.+310    	; 0x1604 <DIO_u8GetPinValue+0x166>
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <DIO_u8GetPinValue+0x3a>
    14d6:	96 c0       	rjmp	.+300    	; 0x1604 <DIO_u8GetPinValue+0x166>
	{

		switch(Copy_u8PortId)
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	38 87       	std	Y+8, r19	; 0x08
    14e0:	2f 83       	std	Y+7, r18	; 0x07
    14e2:	4f 81       	ldd	r20, Y+7	; 0x07
    14e4:	58 85       	ldd	r21, Y+8	; 0x08
    14e6:	41 30       	cpi	r20, 0x01	; 1
    14e8:	51 05       	cpc	r21, r1
    14ea:	a9 f1       	breq	.+106    	; 0x1556 <DIO_u8GetPinValue+0xb8>
    14ec:	8f 81       	ldd	r24, Y+7	; 0x07
    14ee:	98 85       	ldd	r25, Y+8	; 0x08
    14f0:	82 30       	cpi	r24, 0x02	; 2
    14f2:	91 05       	cpc	r25, r1
    14f4:	34 f4       	brge	.+12     	; 0x1502 <DIO_u8GetPinValue+0x64>
    14f6:	2f 81       	ldd	r18, Y+7	; 0x07
    14f8:	38 85       	ldd	r19, Y+8	; 0x08
    14fa:	21 15       	cp	r18, r1
    14fc:	31 05       	cpc	r19, r1
    14fe:	71 f0       	breq	.+28     	; 0x151c <DIO_u8GetPinValue+0x7e>
    1500:	82 c0       	rjmp	.+260    	; 0x1606 <DIO_u8GetPinValue+0x168>
    1502:	4f 81       	ldd	r20, Y+7	; 0x07
    1504:	58 85       	ldd	r21, Y+8	; 0x08
    1506:	42 30       	cpi	r20, 0x02	; 2
    1508:	51 05       	cpc	r21, r1
    150a:	09 f4       	brne	.+2      	; 0x150e <DIO_u8GetPinValue+0x70>
    150c:	41 c0       	rjmp	.+130    	; 0x1590 <DIO_u8GetPinValue+0xf2>
    150e:	8f 81       	ldd	r24, Y+7	; 0x07
    1510:	98 85       	ldd	r25, Y+8	; 0x08
    1512:	83 30       	cpi	r24, 0x03	; 3
    1514:	91 05       	cpc	r25, r1
    1516:	09 f4       	brne	.+2      	; 0x151a <DIO_u8GetPinValue+0x7c>
    1518:	58 c0       	rjmp	.+176    	; 0x15ca <DIO_u8GetPinValue+0x12c>
    151a:	75 c0       	rjmp	.+234    	; 0x1606 <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA:



				Local_u8PinValue = GetBit(DIO_u8_PINA_REG,Copy_u8PinId);
    151c:	e9 e3       	ldi	r30, 0x39	; 57
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a9 01       	movw	r20, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <DIO_u8GetPinValue+0x96>
    1530:	55 95       	asr	r21
    1532:	47 95       	ror	r20
    1534:	8a 95       	dec	r24
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <DIO_u8GetPinValue+0x92>
    1538:	ca 01       	movw	r24, r20
    153a:	81 70       	andi	r24, 0x01	; 1
    153c:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue==0)
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	88 23       	and	r24, r24
    1542:	21 f4       	brne	.+8      	; 0x154c <DIO_u8GetPinValue+0xae>
				{
					*Copy_Pu8ReturnedPinValue = DIO_u8_LOW;
    1544:	ed 81       	ldd	r30, Y+5	; 0x05
    1546:	fe 81       	ldd	r31, Y+6	; 0x06
    1548:	10 82       	st	Z, r1
    154a:	5d c0       	rjmp	.+186    	; 0x1606 <DIO_u8GetPinValue+0x168>
				}
				
				else
				{
					*Copy_Pu8ReturnedPinValue = DIO_u8_HIGH;
    154c:	ed 81       	ldd	r30, Y+5	; 0x05
    154e:	fe 81       	ldd	r31, Y+6	; 0x06
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	80 83       	st	Z, r24
    1554:	58 c0       	rjmp	.+176    	; 0x1606 <DIO_u8GetPinValue+0x168>
				}
				break;
			
			case DIO_u8_PORTB:

				Local_u8PinValue = GetBit(DIO_u8_PINB_REG,Copy_u8PinId);
    1556:	e6 e3       	ldi	r30, 0x36	; 54
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	8c 81       	ldd	r24, Y+4	; 0x04
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a9 01       	movw	r20, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <DIO_u8GetPinValue+0xd0>
    156a:	55 95       	asr	r21
    156c:	47 95       	ror	r20
    156e:	8a 95       	dec	r24
    1570:	e2 f7       	brpl	.-8      	; 0x156a <DIO_u8GetPinValue+0xcc>
    1572:	ca 01       	movw	r24, r20
    1574:	81 70       	andi	r24, 0x01	; 1
    1576:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue==0)
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	88 23       	and	r24, r24
    157c:	21 f4       	brne	.+8      	; 0x1586 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_Pu8ReturnedPinValue = DIO_u8_LOW;
    157e:	ed 81       	ldd	r30, Y+5	; 0x05
    1580:	fe 81       	ldd	r31, Y+6	; 0x06
    1582:	10 82       	st	Z, r1
    1584:	40 c0       	rjmp	.+128    	; 0x1606 <DIO_u8GetPinValue+0x168>
				}
				
				else
				{
					*Copy_Pu8ReturnedPinValue = DIO_u8_HIGH;
    1586:	ed 81       	ldd	r30, Y+5	; 0x05
    1588:	fe 81       	ldd	r31, Y+6	; 0x06
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	80 83       	st	Z, r24
    158e:	3b c0       	rjmp	.+118    	; 0x1606 <DIO_u8GetPinValue+0x168>
				}
				break;
				
			case DIO_u8_PORTC:

				Local_u8PinValue = GetBit(DIO_u8_PINC_REG,Copy_u8PinId);
    1590:	e3 e3       	ldi	r30, 0x33	; 51
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a9 01       	movw	r20, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_u8GetPinValue+0x10a>
    15a4:	55 95       	asr	r21
    15a6:	47 95       	ror	r20
    15a8:	8a 95       	dec	r24
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <DIO_u8GetPinValue+0x106>
    15ac:	ca 01       	movw	r24, r20
    15ae:	81 70       	andi	r24, 0x01	; 1
    15b0:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue==0)
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	88 23       	and	r24, r24
    15b6:	21 f4       	brne	.+8      	; 0x15c0 <DIO_u8GetPinValue+0x122>
				{
					*Copy_Pu8ReturnedPinValue = DIO_u8_LOW;
    15b8:	ed 81       	ldd	r30, Y+5	; 0x05
    15ba:	fe 81       	ldd	r31, Y+6	; 0x06
    15bc:	10 82       	st	Z, r1
    15be:	23 c0       	rjmp	.+70     	; 0x1606 <DIO_u8GetPinValue+0x168>
				}
				
				else
				{
					*Copy_Pu8ReturnedPinValue = DIO_u8_HIGH;
    15c0:	ed 81       	ldd	r30, Y+5	; 0x05
    15c2:	fe 81       	ldd	r31, Y+6	; 0x06
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	80 83       	st	Z, r24
    15c8:	1e c0       	rjmp	.+60     	; 0x1606 <DIO_u8GetPinValue+0x168>
				}
				break;
				
			case DIO_u8_PORTD:

				Local_u8PinValue = GetBit(DIO_u8_PIND_REG,Copy_u8PinId);
    15ca:	e0 e3       	ldi	r30, 0x30	; 48
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	8c 81       	ldd	r24, Y+4	; 0x04
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	a9 01       	movw	r20, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <DIO_u8GetPinValue+0x144>
    15de:	55 95       	asr	r21
    15e0:	47 95       	ror	r20
    15e2:	8a 95       	dec	r24
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <DIO_u8GetPinValue+0x140>
    15e6:	ca 01       	movw	r24, r20
    15e8:	81 70       	andi	r24, 0x01	; 1
    15ea:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue==0)
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	88 23       	and	r24, r24
    15f0:	21 f4       	brne	.+8      	; 0x15fa <DIO_u8GetPinValue+0x15c>
				{
					*Copy_Pu8ReturnedPinValue = DIO_u8_LOW;
    15f2:	ed 81       	ldd	r30, Y+5	; 0x05
    15f4:	fe 81       	ldd	r31, Y+6	; 0x06
    15f6:	10 82       	st	Z, r1
    15f8:	06 c0       	rjmp	.+12     	; 0x1606 <DIO_u8GetPinValue+0x168>
				}
				
				else
				{
					*Copy_Pu8ReturnedPinValue = DIO_u8_HIGH;
    15fa:	ed 81       	ldd	r30, Y+5	; 0x05
    15fc:	fe 81       	ldd	r31, Y+6	; 0x06
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	80 83       	st	Z, r24
    1602:	01 c0       	rjmp	.+2      	; 0x1606 <DIO_u8GetPinValue+0x168>
		}
		
	}
	else
	{
		Local_u8ErrorState=STD_TYPES_NOT_OK;
    1604:	1a 82       	std	Y+2, r1	; 0x02
	}
	
	return Local_u8ErrorState;
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1608:	28 96       	adiw	r28, 0x08	; 8
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
    1614:	cf 91       	pop	r28
    1616:	df 91       	pop	r29
    1618:	08 95       	ret

0000161a <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId , u8 Copy_u8PinDirection)
{
    161a:	df 93       	push	r29
    161c:	cf 93       	push	r28
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	2d 97       	sbiw	r28, 0x0d	; 13
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	8a 83       	std	Y+2, r24	; 0x02
    1630:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=STD_TYPES_OK;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinDirection==DIO_u8_HIGH) || (Copy_u8PinDirection==DIO_u8_LOW))
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	21 f0       	breq	.+8      	; 0x1644 <DIO_u8SetPortDirection+0x2a>
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	88 23       	and	r24, r24
    1640:	09 f0       	breq	.+2      	; 0x1644 <DIO_u8SetPortDirection+0x2a>
    1642:	82 c0       	rjmp	.+260    	; 0x1748 <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
    1644:	8a 81       	ldd	r24, Y+2	; 0x02
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	3d 87       	std	Y+13, r19	; 0x0d
    164c:	2c 87       	std	Y+12, r18	; 0x0c
    164e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1650:	9d 85       	ldd	r25, Y+13	; 0x0d
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	91 05       	cpc	r25, r1
    1656:	71 f1       	breq	.+92     	; 0x16b4 <DIO_u8SetPortDirection+0x9a>
    1658:	2c 85       	ldd	r18, Y+12	; 0x0c
    165a:	3d 85       	ldd	r19, Y+13	; 0x0d
    165c:	22 30       	cpi	r18, 0x02	; 2
    165e:	31 05       	cpc	r19, r1
    1660:	2c f4       	brge	.+10     	; 0x166c <DIO_u8SetPortDirection+0x52>
    1662:	8c 85       	ldd	r24, Y+12	; 0x0c
    1664:	9d 85       	ldd	r25, Y+13	; 0x0d
    1666:	00 97       	sbiw	r24, 0x00	; 0
    1668:	69 f0       	breq	.+26     	; 0x1684 <DIO_u8SetPortDirection+0x6a>
    166a:	6c c0       	rjmp	.+216    	; 0x1744 <DIO_u8SetPortDirection+0x12a>
    166c:	2c 85       	ldd	r18, Y+12	; 0x0c
    166e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1670:	22 30       	cpi	r18, 0x02	; 2
    1672:	31 05       	cpc	r19, r1
    1674:	b9 f1       	breq	.+110    	; 0x16e4 <DIO_u8SetPortDirection+0xca>
    1676:	8c 85       	ldd	r24, Y+12	; 0x0c
    1678:	9d 85       	ldd	r25, Y+13	; 0x0d
    167a:	83 30       	cpi	r24, 0x03	; 3
    167c:	91 05       	cpc	r25, r1
    167e:	09 f4       	brne	.+2      	; 0x1682 <DIO_u8SetPortDirection+0x68>
    1680:	49 c0       	rjmp	.+146    	; 0x1714 <DIO_u8SetPortDirection+0xfa>
    1682:	60 c0       	rjmp	.+192    	; 0x1744 <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	3b 87       	std	Y+11, r19	; 0x0b
    168c:	2a 87       	std	Y+10, r18	; 0x0a
    168e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1690:	9b 85       	ldd	r25, Y+11	; 0x0b
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	31 f0       	breq	.+12     	; 0x16a2 <DIO_u8SetPortDirection+0x88>
    1696:	2a 85       	ldd	r18, Y+10	; 0x0a
    1698:	3b 85       	ldd	r19, Y+11	; 0x0b
    169a:	21 30       	cpi	r18, 0x01	; 1
    169c:	31 05       	cpc	r19, r1
    169e:	29 f0       	breq	.+10     	; 0x16aa <DIO_u8SetPortDirection+0x90>
    16a0:	54 c0       	rjmp	.+168    	; 0x174a <DIO_u8SetPortDirection+0x130>
			{
				case DIO_u8_INPUT:
					DIO_u8_DDRA_REG = 0x00;
    16a2:	ea e3       	ldi	r30, 0x3A	; 58
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	10 82       	st	Z, r1
    16a8:	50 c0       	rjmp	.+160    	; 0x174a <DIO_u8SetPortDirection+0x130>
					break;
				case DIO_u8_OUTPUT:
					DIO_u8_DDRA_REG = 0xff;
    16aa:	ea e3       	ldi	r30, 0x3A	; 58
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	8f ef       	ldi	r24, 0xFF	; 255
    16b0:	80 83       	st	Z, r24
    16b2:	4b c0       	rjmp	.+150    	; 0x174a <DIO_u8SetPortDirection+0x130>
					break;
			}
			break;
			
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	39 87       	std	Y+9, r19	; 0x09
    16bc:	28 87       	std	Y+8, r18	; 0x08
    16be:	88 85       	ldd	r24, Y+8	; 0x08
    16c0:	99 85       	ldd	r25, Y+9	; 0x09
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	31 f0       	breq	.+12     	; 0x16d2 <DIO_u8SetPortDirection+0xb8>
    16c6:	28 85       	ldd	r18, Y+8	; 0x08
    16c8:	39 85       	ldd	r19, Y+9	; 0x09
    16ca:	21 30       	cpi	r18, 0x01	; 1
    16cc:	31 05       	cpc	r19, r1
    16ce:	29 f0       	breq	.+10     	; 0x16da <DIO_u8SetPortDirection+0xc0>
    16d0:	3c c0       	rjmp	.+120    	; 0x174a <DIO_u8SetPortDirection+0x130>
			{
				case DIO_u8_INPUT:
					DIO_u8_DDRB_REG = 0x00;
    16d2:	e7 e3       	ldi	r30, 0x37	; 55
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	10 82       	st	Z, r1
    16d8:	38 c0       	rjmp	.+112    	; 0x174a <DIO_u8SetPortDirection+0x130>
					break;
				case DIO_u8_OUTPUT:
					DIO_u8_DDRB_REG = 0xff;
    16da:	e7 e3       	ldi	r30, 0x37	; 55
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	8f ef       	ldi	r24, 0xFF	; 255
    16e0:	80 83       	st	Z, r24
    16e2:	33 c0       	rjmp	.+102    	; 0x174a <DIO_u8SetPortDirection+0x130>
					break;
			}
			break;
			
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	3f 83       	std	Y+7, r19	; 0x07
    16ec:	2e 83       	std	Y+6, r18	; 0x06
    16ee:	8e 81       	ldd	r24, Y+6	; 0x06
    16f0:	9f 81       	ldd	r25, Y+7	; 0x07
    16f2:	00 97       	sbiw	r24, 0x00	; 0
    16f4:	31 f0       	breq	.+12     	; 0x1702 <DIO_u8SetPortDirection+0xe8>
    16f6:	2e 81       	ldd	r18, Y+6	; 0x06
    16f8:	3f 81       	ldd	r19, Y+7	; 0x07
    16fa:	21 30       	cpi	r18, 0x01	; 1
    16fc:	31 05       	cpc	r19, r1
    16fe:	29 f0       	breq	.+10     	; 0x170a <DIO_u8SetPortDirection+0xf0>
    1700:	24 c0       	rjmp	.+72     	; 0x174a <DIO_u8SetPortDirection+0x130>
			{
				case DIO_u8_INPUT:
					DIO_u8_DDRC_REG = 0x00;
    1702:	e4 e3       	ldi	r30, 0x34	; 52
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	10 82       	st	Z, r1
    1708:	20 c0       	rjmp	.+64     	; 0x174a <DIO_u8SetPortDirection+0x130>
					break;
				case DIO_u8_OUTPUT:
					DIO_u8_DDRC_REG = 0xff;
    170a:	e4 e3       	ldi	r30, 0x34	; 52
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	8f ef       	ldi	r24, 0xFF	; 255
    1710:	80 83       	st	Z, r24
    1712:	1b c0       	rjmp	.+54     	; 0x174a <DIO_u8SetPortDirection+0x130>
					break;
			}
			break;
			
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	3d 83       	std	Y+5, r19	; 0x05
    171c:	2c 83       	std	Y+4, r18	; 0x04
    171e:	8c 81       	ldd	r24, Y+4	; 0x04
    1720:	9d 81       	ldd	r25, Y+5	; 0x05
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	31 f0       	breq	.+12     	; 0x1732 <DIO_u8SetPortDirection+0x118>
    1726:	2c 81       	ldd	r18, Y+4	; 0x04
    1728:	3d 81       	ldd	r19, Y+5	; 0x05
    172a:	21 30       	cpi	r18, 0x01	; 1
    172c:	31 05       	cpc	r19, r1
    172e:	29 f0       	breq	.+10     	; 0x173a <DIO_u8SetPortDirection+0x120>
    1730:	0c c0       	rjmp	.+24     	; 0x174a <DIO_u8SetPortDirection+0x130>
			{
				case DIO_u8_INPUT:
					DIO_u8_DDRD_REG = 0x00;
    1732:	e1 e3       	ldi	r30, 0x31	; 49
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	10 82       	st	Z, r1
    1738:	08 c0       	rjmp	.+16     	; 0x174a <DIO_u8SetPortDirection+0x130>
					break;
				case DIO_u8_OUTPUT:
					DIO_u8_DDRD_REG = 0xff;
    173a:	e1 e3       	ldi	r30, 0x31	; 49
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	8f ef       	ldi	r24, 0xFF	; 255
    1740:	80 83       	st	Z, r24
    1742:	03 c0       	rjmp	.+6      	; 0x174a <DIO_u8SetPortDirection+0x130>
					break;
			}
			break;
			
			default:
				Local_u8ErrorState = STD_TYPES_NOT_OK;
    1744:	19 82       	std	Y+1, r1	; 0x01
    1746:	01 c0       	rjmp	.+2      	; 0x174a <DIO_u8SetPortDirection+0x130>
		}
		
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOT_OK;
    1748:	19 82       	std	Y+1, r1	; 0x01
	
	
	
	
	
	return Local_u8ErrorState;
    174a:	89 81       	ldd	r24, Y+1	; 0x01
}
    174c:	2d 96       	adiw	r28, 0x0d	; 13
    174e:	0f b6       	in	r0, 0x3f	; 63
    1750:	f8 94       	cli
    1752:	de bf       	out	0x3e, r29	; 62
    1754:	0f be       	out	0x3f, r0	; 63
    1756:	cd bf       	out	0x3d, r28	; 61
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId , u8 Copy_u8PortValue)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	00 d0       	rcall	.+0      	; 0x1764 <DIO_u8SetPortValue+0x6>
    1764:	00 d0       	rcall	.+0      	; 0x1766 <DIO_u8SetPortValue+0x8>
    1766:	0f 92       	push	r0
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	8a 83       	std	Y+2, r24	; 0x02
    176e:	6b 83       	std	Y+3, r22	; 0x03
	
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	89 83       	std	Y+1, r24	; 0x01
	
	switch(Copy_u8PortId)
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	3d 83       	std	Y+5, r19	; 0x05
    177c:	2c 83       	std	Y+4, r18	; 0x04
    177e:	8c 81       	ldd	r24, Y+4	; 0x04
    1780:	9d 81       	ldd	r25, Y+5	; 0x05
    1782:	81 30       	cpi	r24, 0x01	; 1
    1784:	91 05       	cpc	r25, r1
    1786:	d1 f0       	breq	.+52     	; 0x17bc <DIO_u8SetPortValue+0x5e>
    1788:	2c 81       	ldd	r18, Y+4	; 0x04
    178a:	3d 81       	ldd	r19, Y+5	; 0x05
    178c:	22 30       	cpi	r18, 0x02	; 2
    178e:	31 05       	cpc	r19, r1
    1790:	2c f4       	brge	.+10     	; 0x179c <DIO_u8SetPortValue+0x3e>
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	9d 81       	ldd	r25, Y+5	; 0x05
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	61 f0       	breq	.+24     	; 0x17b2 <DIO_u8SetPortValue+0x54>
    179a:	1f c0       	rjmp	.+62     	; 0x17da <DIO_u8SetPortValue+0x7c>
    179c:	2c 81       	ldd	r18, Y+4	; 0x04
    179e:	3d 81       	ldd	r19, Y+5	; 0x05
    17a0:	22 30       	cpi	r18, 0x02	; 2
    17a2:	31 05       	cpc	r19, r1
    17a4:	81 f0       	breq	.+32     	; 0x17c6 <DIO_u8SetPortValue+0x68>
    17a6:	8c 81       	ldd	r24, Y+4	; 0x04
    17a8:	9d 81       	ldd	r25, Y+5	; 0x05
    17aa:	83 30       	cpi	r24, 0x03	; 3
    17ac:	91 05       	cpc	r25, r1
    17ae:	81 f0       	breq	.+32     	; 0x17d0 <DIO_u8SetPortValue+0x72>
    17b0:	14 c0       	rjmp	.+40     	; 0x17da <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:
			DIO_u8_PORTA_REG = Copy_u8PortValue;
    17b2:	eb e3       	ldi	r30, 0x3B	; 59
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	80 83       	st	Z, r24
    17ba:	10 c0       	rjmp	.+32     	; 0x17dc <DIO_u8SetPortValue+0x7e>
			break;
		
		case DIO_u8_PORTB:
			DIO_u8_PORTB_REG = Copy_u8PortValue;
    17bc:	e8 e3       	ldi	r30, 0x38	; 56
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	80 83       	st	Z, r24
    17c4:	0b c0       	rjmp	.+22     	; 0x17dc <DIO_u8SetPortValue+0x7e>
			break;
			
		case DIO_u8_PORTC:
			DIO_u8_PORTC_REG = Copy_u8PortValue;
    17c6:	e5 e3       	ldi	r30, 0x35	; 53
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	80 83       	st	Z, r24
    17ce:	06 c0       	rjmp	.+12     	; 0x17dc <DIO_u8SetPortValue+0x7e>
			break;
			
		case DIO_u8_PORTD:
			DIO_u8_PORTD_REG = Copy_u8PortValue;
    17d0:	e2 e3       	ldi	r30, 0x32	; 50
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	80 83       	st	Z, r24
    17d8:	01 c0       	rjmp	.+2      	; 0x17dc <DIO_u8SetPortValue+0x7e>
			break;
		
		default:
			Local_u8ErrorState = STD_TYPES_NOT_OK;
    17da:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17de:	0f 90       	pop	r0
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId , u8* Copy_Pu8ReturnedPortValue)
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <DIO_u8GetPortValue+0x6>
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <DIO_u8GetPortValue+0x8>
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <DIO_u8GetPortValue+0xa>
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
    17fc:	8a 83       	std	Y+2, r24	; 0x02
    17fe:	7c 83       	std	Y+4, r23	; 0x04
    1800:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_Pu8ReturnedPortValue!=NULL)
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	9c 81       	ldd	r25, Y+4	; 0x04
    180a:	00 97       	sbiw	r24, 0x00	; 0
    180c:	e9 f1       	breq	.+122    	; 0x1888 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	3e 83       	std	Y+6, r19	; 0x06
    1816:	2d 83       	std	Y+5, r18	; 0x05
    1818:	8d 81       	ldd	r24, Y+5	; 0x05
    181a:	9e 81       	ldd	r25, Y+6	; 0x06
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	91 05       	cpc	r25, r1
    1820:	e1 f0       	breq	.+56     	; 0x185a <DIO_u8GetPortValue+0x6c>
    1822:	2d 81       	ldd	r18, Y+5	; 0x05
    1824:	3e 81       	ldd	r19, Y+6	; 0x06
    1826:	22 30       	cpi	r18, 0x02	; 2
    1828:	31 05       	cpc	r19, r1
    182a:	2c f4       	brge	.+10     	; 0x1836 <DIO_u8GetPortValue+0x48>
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	9e 81       	ldd	r25, Y+6	; 0x06
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	61 f0       	breq	.+24     	; 0x184c <DIO_u8GetPortValue+0x5e>
    1834:	27 c0       	rjmp	.+78     	; 0x1884 <DIO_u8GetPortValue+0x96>
    1836:	2d 81       	ldd	r18, Y+5	; 0x05
    1838:	3e 81       	ldd	r19, Y+6	; 0x06
    183a:	22 30       	cpi	r18, 0x02	; 2
    183c:	31 05       	cpc	r19, r1
    183e:	a1 f0       	breq	.+40     	; 0x1868 <DIO_u8GetPortValue+0x7a>
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	83 30       	cpi	r24, 0x03	; 3
    1846:	91 05       	cpc	r25, r1
    1848:	b1 f0       	breq	.+44     	; 0x1876 <DIO_u8GetPortValue+0x88>
    184a:	1c c0       	rjmp	.+56     	; 0x1884 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA:
				*Copy_Pu8ReturnedPortValue = DIO_u8_PINA_REG;
    184c:	e9 e3       	ldi	r30, 0x39	; 57
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	eb 81       	ldd	r30, Y+3	; 0x03
    1854:	fc 81       	ldd	r31, Y+4	; 0x04
    1856:	80 83       	st	Z, r24
    1858:	18 c0       	rjmp	.+48     	; 0x188a <DIO_u8GetPortValue+0x9c>
				break;
				
			case DIO_u8_PORTB:
				*Copy_Pu8ReturnedPortValue = DIO_u8_PINB_REG;
    185a:	e6 e3       	ldi	r30, 0x36	; 54
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	eb 81       	ldd	r30, Y+3	; 0x03
    1862:	fc 81       	ldd	r31, Y+4	; 0x04
    1864:	80 83       	st	Z, r24
    1866:	11 c0       	rjmp	.+34     	; 0x188a <DIO_u8GetPortValue+0x9c>
				break;
				
				
			case DIO_u8_PORTC:
				*Copy_Pu8ReturnedPortValue = DIO_u8_PINC_REG;
    1868:	e3 e3       	ldi	r30, 0x33	; 51
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	eb 81       	ldd	r30, Y+3	; 0x03
    1870:	fc 81       	ldd	r31, Y+4	; 0x04
    1872:	80 83       	st	Z, r24
    1874:	0a c0       	rjmp	.+20     	; 0x188a <DIO_u8GetPortValue+0x9c>
				break;
			
			case DIO_u8_PORTD:
				*Copy_Pu8ReturnedPortValue = DIO_u8_PIND_REG;
    1876:	e0 e3       	ldi	r30, 0x30	; 48
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	eb 81       	ldd	r30, Y+3	; 0x03
    187e:	fc 81       	ldd	r31, Y+4	; 0x04
    1880:	80 83       	st	Z, r24
    1882:	03 c0       	rjmp	.+6      	; 0x188a <DIO_u8GetPortValue+0x9c>
				break;
				
			default:
				Local_u8ErrorState = STD_TYPES_NOT_OK;
    1884:	19 82       	std	Y+1, r1	; 0x01
    1886:	01 c0       	rjmp	.+2      	; 0x188a <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOT_OK;
    1888:	19 82       	std	Y+1, r1	; 0x01
	}
	
	
	
	return Local_u8ErrorState;
    188a:	89 81       	ldd	r24, Y+1	; 0x01
}
    188c:	26 96       	adiw	r28, 0x06	; 6
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <LCD_voidInitialize>:
#include<util/delay.h>



	void LCD_voidInitialize()
	{
    189e:	0f 93       	push	r16
    18a0:	1f 93       	push	r17
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	cc 54       	subi	r28, 0x4C	; 76
    18ac:	d0 40       	sbci	r29, 0x00	; 0
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
    18b8:	fe 01       	movw	r30, r28
    18ba:	e7 5b       	subi	r30, 0xB7	; 183
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	ac e0       	ldi	r26, 0x0C	; 12
    18c4:	b2 e4       	ldi	r27, 0x42	; 66
    18c6:	80 83       	st	Z, r24
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	a2 83       	std	Z+2, r26	; 0x02
    18cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ce:	8e 01       	movw	r16, r28
    18d0:	0b 5b       	subi	r16, 0xBB	; 187
    18d2:	1f 4f       	sbci	r17, 0xFF	; 255
    18d4:	fe 01       	movw	r30, r28
    18d6:	e7 5b       	subi	r30, 0xB7	; 183
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	4a ef       	ldi	r20, 0xFA	; 250
    18e8:	54 e4       	ldi	r21, 0x44	; 68
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	f8 01       	movw	r30, r16
    18f4:	80 83       	st	Z, r24
    18f6:	91 83       	std	Z+1, r25	; 0x01
    18f8:	a2 83       	std	Z+2, r26	; 0x02
    18fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18fc:	fe 01       	movw	r30, r28
    18fe:	eb 5b       	subi	r30, 0xBB	; 187
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	60 81       	ld	r22, Z
    1904:	71 81       	ldd	r23, Z+1	; 0x01
    1906:	82 81       	ldd	r24, Z+2	; 0x02
    1908:	93 81       	ldd	r25, Z+3	; 0x03
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e8       	ldi	r20, 0x80	; 128
    1910:	5f e3       	ldi	r21, 0x3F	; 63
    1912:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1916:	88 23       	and	r24, r24
    1918:	44 f4       	brge	.+16     	; 0x192a <LCD_voidInitialize+0x8c>
		__ticks = 1;
    191a:	fe 01       	movw	r30, r28
    191c:	ed 5b       	subi	r30, 0xBD	; 189
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	91 83       	std	Z+1, r25	; 0x01
    1926:	80 83       	st	Z, r24
    1928:	64 c0       	rjmp	.+200    	; 0x19f2 <LCD_voidInitialize+0x154>
	else if (__tmp > 65535)
    192a:	fe 01       	movw	r30, r28
    192c:	eb 5b       	subi	r30, 0xBB	; 187
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	60 81       	ld	r22, Z
    1932:	71 81       	ldd	r23, Z+1	; 0x01
    1934:	82 81       	ldd	r24, Z+2	; 0x02
    1936:	93 81       	ldd	r25, Z+3	; 0x03
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	3f ef       	ldi	r19, 0xFF	; 255
    193c:	4f e7       	ldi	r20, 0x7F	; 127
    193e:	57 e4       	ldi	r21, 0x47	; 71
    1940:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1944:	18 16       	cp	r1, r24
    1946:	0c f0       	brlt	.+2      	; 0x194a <LCD_voidInitialize+0xac>
    1948:	43 c0       	rjmp	.+134    	; 0x19d0 <LCD_voidInitialize+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194a:	fe 01       	movw	r30, r28
    194c:	e7 5b       	subi	r30, 0xB7	; 183
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	60 81       	ld	r22, Z
    1952:	71 81       	ldd	r23, Z+1	; 0x01
    1954:	82 81       	ldd	r24, Z+2	; 0x02
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e2       	ldi	r20, 0x20	; 32
    195e:	51 e4       	ldi	r21, 0x41	; 65
    1960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	8e 01       	movw	r16, r28
    196a:	0d 5b       	subi	r16, 0xBD	; 189
    196c:	1f 4f       	sbci	r17, 0xFF	; 255
    196e:	bc 01       	movw	r22, r24
    1970:	cd 01       	movw	r24, r26
    1972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	f8 01       	movw	r30, r16
    197c:	91 83       	std	Z+1, r25	; 0x01
    197e:	80 83       	st	Z, r24
    1980:	1f c0       	rjmp	.+62     	; 0x19c0 <LCD_voidInitialize+0x122>
    1982:	fe 01       	movw	r30, r28
    1984:	ef 5b       	subi	r30, 0xBF	; 191
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	88 ec       	ldi	r24, 0xC8	; 200
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1990:	fe 01       	movw	r30, r28
    1992:	ef 5b       	subi	r30, 0xBF	; 191
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	80 81       	ld	r24, Z
    1998:	91 81       	ldd	r25, Z+1	; 0x01
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <LCD_voidInitialize+0xfc>
    199e:	fe 01       	movw	r30, r28
    19a0:	ef 5b       	subi	r30, 0xBF	; 191
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a8:	de 01       	movw	r26, r28
    19aa:	ad 5b       	subi	r26, 0xBD	; 189
    19ac:	bf 4f       	sbci	r27, 0xFF	; 255
    19ae:	fe 01       	movw	r30, r28
    19b0:	ed 5b       	subi	r30, 0xBD	; 189
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 81       	ld	r24, Z
    19b6:	91 81       	ldd	r25, Z+1	; 0x01
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	11 96       	adiw	r26, 0x01	; 1
    19bc:	9c 93       	st	X, r25
    19be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c0:	fe 01       	movw	r30, r28
    19c2:	ed 5b       	subi	r30, 0xBD	; 189
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	80 81       	ld	r24, Z
    19c8:	91 81       	ldd	r25, Z+1	; 0x01
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	d1 f6       	brne	.-76     	; 0x1982 <LCD_voidInitialize+0xe4>
    19ce:	24 c0       	rjmp	.+72     	; 0x1a18 <LCD_voidInitialize+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d0:	8e 01       	movw	r16, r28
    19d2:	0d 5b       	subi	r16, 0xBD	; 189
    19d4:	1f 4f       	sbci	r17, 0xFF	; 255
    19d6:	fe 01       	movw	r30, r28
    19d8:	eb 5b       	subi	r30, 0xBB	; 187
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	60 81       	ld	r22, Z
    19de:	71 81       	ldd	r23, Z+1	; 0x01
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	93 81       	ldd	r25, Z+3	; 0x03
    19e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	f8 01       	movw	r30, r16
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	80 83       	st	Z, r24
    19f2:	fe 01       	movw	r30, r28
    19f4:	ed 5b       	subi	r30, 0xBD	; 189
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	fe 01       	movw	r30, r28
    19fe:	ff 96       	adiw	r30, 0x3f	; 63
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	80 83       	st	Z, r24
    1a04:	fe 01       	movw	r30, r28
    1a06:	ff 96       	adiw	r30, 0x3f	; 63
    1a08:	80 81       	ld	r24, Z
    1a0a:	91 81       	ldd	r25, Z+1	; 0x01
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <LCD_voidInitialize+0x16e>
    1a10:	fe 01       	movw	r30, r28
    1a12:	ff 96       	adiw	r30, 0x3f	; 63
    1a14:	91 83       	std	Z+1, r25	; 0x01
    1a16:	80 83       	st	Z, r24
		_delay_ms(35);
		//Function Set Command
		LCD_voidSendCommand(0b00111000);
    1a18:	88 e3       	ldi	r24, 0x38	; 56
    1a1a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a0 e2       	ldi	r26, 0x20	; 32
    1a24:	b2 e4       	ldi	r27, 0x42	; 66
    1a26:	8b af       	std	Y+59, r24	; 0x3b
    1a28:	9c af       	std	Y+60, r25	; 0x3c
    1a2a:	ad af       	std	Y+61, r26	; 0x3d
    1a2c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a2e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a30:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a32:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a34:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a36:	2b ea       	ldi	r18, 0xAB	; 171
    1a38:	3a ea       	ldi	r19, 0xAA	; 170
    1a3a:	4a e2       	ldi	r20, 0x2A	; 42
    1a3c:	50 e4       	ldi	r21, 0x40	; 64
    1a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	8f ab       	std	Y+55, r24	; 0x37
    1a48:	98 af       	std	Y+56, r25	; 0x38
    1a4a:	a9 af       	std	Y+57, r26	; 0x39
    1a4c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a4e:	6f a9       	ldd	r22, Y+55	; 0x37
    1a50:	78 ad       	ldd	r23, Y+56	; 0x38
    1a52:	89 ad       	ldd	r24, Y+57	; 0x39
    1a54:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e8       	ldi	r20, 0x80	; 128
    1a5c:	5f e3       	ldi	r21, 0x3F	; 63
    1a5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a62:	88 23       	and	r24, r24
    1a64:	1c f4       	brge	.+6      	; 0x1a6c <LCD_voidInitialize+0x1ce>
		__ticks = 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	8e ab       	std	Y+54, r24	; 0x36
    1a6a:	91 c0       	rjmp	.+290    	; 0x1b8e <LCD_voidInitialize+0x2f0>
	else if (__tmp > 255)
    1a6c:	6f a9       	ldd	r22, Y+55	; 0x37
    1a6e:	78 ad       	ldd	r23, Y+56	; 0x38
    1a70:	89 ad       	ldd	r24, Y+57	; 0x39
    1a72:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	4f e7       	ldi	r20, 0x7F	; 127
    1a7a:	53 e4       	ldi	r21, 0x43	; 67
    1a7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a80:	18 16       	cp	r1, r24
    1a82:	0c f0       	brlt	.+2      	; 0x1a86 <LCD_voidInitialize+0x1e8>
    1a84:	7b c0       	rjmp	.+246    	; 0x1b7c <LCD_voidInitialize+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1a86:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a88:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	4a e7       	ldi	r20, 0x7A	; 122
    1a94:	54 e4       	ldi	r21, 0x44	; 68
    1a96:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	8a ab       	std	Y+50, r24	; 0x32
    1aa0:	9b ab       	std	Y+51, r25	; 0x33
    1aa2:	ac ab       	std	Y+52, r26	; 0x34
    1aa4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa6:	6a a9       	ldd	r22, Y+50	; 0x32
    1aa8:	7b a9       	ldd	r23, Y+51	; 0x33
    1aaa:	8c a9       	ldd	r24, Y+52	; 0x34
    1aac:	9d a9       	ldd	r25, Y+53	; 0x35
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	4a ef       	ldi	r20, 0xFA	; 250
    1ab4:	54 e4       	ldi	r21, 0x44	; 68
    1ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	8e a7       	std	Y+46, r24	; 0x2e
    1ac0:	9f a7       	std	Y+47, r25	; 0x2f
    1ac2:	a8 ab       	std	Y+48, r26	; 0x30
    1ac4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1ac6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ac8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1aca:	88 a9       	ldd	r24, Y+48	; 0x30
    1acc:	99 a9       	ldd	r25, Y+49	; 0x31
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e8       	ldi	r20, 0x80	; 128
    1ad4:	5f e3       	ldi	r21, 0x3F	; 63
    1ad6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ada:	88 23       	and	r24, r24
    1adc:	2c f4       	brge	.+10     	; 0x1ae8 <LCD_voidInitialize+0x24a>
		__ticks = 1;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9d a7       	std	Y+45, r25	; 0x2d
    1ae4:	8c a7       	std	Y+44, r24	; 0x2c
    1ae6:	3f c0       	rjmp	.+126    	; 0x1b66 <LCD_voidInitialize+0x2c8>
	else if (__tmp > 65535)
    1ae8:	6e a5       	ldd	r22, Y+46	; 0x2e
    1aea:	7f a5       	ldd	r23, Y+47	; 0x2f
    1aec:	88 a9       	ldd	r24, Y+48	; 0x30
    1aee:	99 a9       	ldd	r25, Y+49	; 0x31
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	3f ef       	ldi	r19, 0xFF	; 255
    1af4:	4f e7       	ldi	r20, 0x7F	; 127
    1af6:	57 e4       	ldi	r21, 0x47	; 71
    1af8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1afc:	18 16       	cp	r1, r24
    1afe:	4c f5       	brge	.+82     	; 0x1b52 <LCD_voidInitialize+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b00:	6a a9       	ldd	r22, Y+50	; 0x32
    1b02:	7b a9       	ldd	r23, Y+51	; 0x33
    1b04:	8c a9       	ldd	r24, Y+52	; 0x34
    1b06:	9d a9       	ldd	r25, Y+53	; 0x35
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e2       	ldi	r20, 0x20	; 32
    1b0e:	51 e4       	ldi	r21, 0x41	; 65
    1b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9d a7       	std	Y+45, r25	; 0x2d
    1b26:	8c a7       	std	Y+44, r24	; 0x2c
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <LCD_voidInitialize+0x2aa>
    1b2a:	88 ec       	ldi	r24, 0xC8	; 200
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9b a7       	std	Y+43, r25	; 0x2b
    1b30:	8a a7       	std	Y+42, r24	; 0x2a
    1b32:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b34:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <LCD_voidInitialize+0x298>
    1b3a:	9b a7       	std	Y+43, r25	; 0x2b
    1b3c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b40:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	9d a7       	std	Y+45, r25	; 0x2d
    1b46:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b48:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b4a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	69 f7       	brne	.-38     	; 0x1b2a <LCD_voidInitialize+0x28c>
    1b50:	24 c0       	rjmp	.+72     	; 0x1b9a <LCD_voidInitialize+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b52:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b54:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b56:	88 a9       	ldd	r24, Y+48	; 0x30
    1b58:	99 a9       	ldd	r25, Y+49	; 0x31
    1b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	9d a7       	std	Y+45, r25	; 0x2d
    1b64:	8c a7       	std	Y+44, r24	; 0x2c
    1b66:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b68:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b6a:	99 a7       	std	Y+41, r25	; 0x29
    1b6c:	88 a7       	std	Y+40, r24	; 0x28
    1b6e:	88 a5       	ldd	r24, Y+40	; 0x28
    1b70:	99 a5       	ldd	r25, Y+41	; 0x29
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <LCD_voidInitialize+0x2d4>
    1b76:	99 a7       	std	Y+41, r25	; 0x29
    1b78:	88 a7       	std	Y+40, r24	; 0x28
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <LCD_voidInitialize+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b7c:	6f a9       	ldd	r22, Y+55	; 0x37
    1b7e:	78 ad       	ldd	r23, Y+56	; 0x38
    1b80:	89 ad       	ldd	r24, Y+57	; 0x39
    1b82:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	8e ab       	std	Y+54, r24	; 0x36
    1b8e:	8e a9       	ldd	r24, Y+54	; 0x36
    1b90:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b92:	8f a1       	ldd	r24, Y+39	; 0x27
    1b94:	8a 95       	dec	r24
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <LCD_voidInitialize+0x2f6>
    1b98:	8f a3       	std	Y+39, r24	; 0x27
		_delay_us(40);
		LCD_voidSendCommand(0b00001111);
    1b9a:	8f e0       	ldi	r24, 0x0F	; 15
    1b9c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	a0 e2       	ldi	r26, 0x20	; 32
    1ba6:	b2 e4       	ldi	r27, 0x42	; 66
    1ba8:	8b a3       	std	Y+35, r24	; 0x23
    1baa:	9c a3       	std	Y+36, r25	; 0x24
    1bac:	ad a3       	std	Y+37, r26	; 0x25
    1bae:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bb0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bb2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bb4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb8:	2b ea       	ldi	r18, 0xAB	; 171
    1bba:	3a ea       	ldi	r19, 0xAA	; 170
    1bbc:	4a e2       	ldi	r20, 0x2A	; 42
    1bbe:	50 e4       	ldi	r21, 0x40	; 64
    1bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	8f 8f       	std	Y+31, r24	; 0x1f
    1bca:	98 a3       	std	Y+32, r25	; 0x20
    1bcc:	a9 a3       	std	Y+33, r26	; 0x21
    1bce:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1bd0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bd2:	78 a1       	ldd	r23, Y+32	; 0x20
    1bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be4:	88 23       	and	r24, r24
    1be6:	1c f4       	brge	.+6      	; 0x1bee <LCD_voidInitialize+0x350>
		__ticks = 1;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	8e 8f       	std	Y+30, r24	; 0x1e
    1bec:	91 c0       	rjmp	.+290    	; 0x1d10 <LCD_voidInitialize+0x472>
	else if (__tmp > 255)
    1bee:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bf0:	78 a1       	ldd	r23, Y+32	; 0x20
    1bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	53 e4       	ldi	r21, 0x43	; 67
    1bfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	0c f0       	brlt	.+2      	; 0x1c08 <LCD_voidInitialize+0x36a>
    1c06:	7b c0       	rjmp	.+246    	; 0x1cfe <LCD_voidInitialize+0x460>
	{
		_delay_ms(__us / 1000.0);
    1c08:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4a e7       	ldi	r20, 0x7A	; 122
    1c16:	54 e4       	ldi	r21, 0x44	; 68
    1c18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	8a 8f       	std	Y+26, r24	; 0x1a
    1c22:	9b 8f       	std	Y+27, r25	; 0x1b
    1c24:	ac 8f       	std	Y+28, r26	; 0x1c
    1c26:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c28:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c2a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c2c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c2e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	4a ef       	ldi	r20, 0xFA	; 250
    1c36:	54 e4       	ldi	r21, 0x44	; 68
    1c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	8e 8b       	std	Y+22, r24	; 0x16
    1c42:	9f 8b       	std	Y+23, r25	; 0x17
    1c44:	a8 8f       	std	Y+24, r26	; 0x18
    1c46:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c48:	6e 89       	ldd	r22, Y+22	; 0x16
    1c4a:	7f 89       	ldd	r23, Y+23	; 0x17
    1c4c:	88 8d       	ldd	r24, Y+24	; 0x18
    1c4e:	99 8d       	ldd	r25, Y+25	; 0x19
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e8       	ldi	r20, 0x80	; 128
    1c56:	5f e3       	ldi	r21, 0x3F	; 63
    1c58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c5c:	88 23       	and	r24, r24
    1c5e:	2c f4       	brge	.+10     	; 0x1c6a <LCD_voidInitialize+0x3cc>
		__ticks = 1;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9d 8b       	std	Y+21, r25	; 0x15
    1c66:	8c 8b       	std	Y+20, r24	; 0x14
    1c68:	3f c0       	rjmp	.+126    	; 0x1ce8 <LCD_voidInitialize+0x44a>
	else if (__tmp > 65535)
    1c6a:	6e 89       	ldd	r22, Y+22	; 0x16
    1c6c:	7f 89       	ldd	r23, Y+23	; 0x17
    1c6e:	88 8d       	ldd	r24, Y+24	; 0x18
    1c70:	99 8d       	ldd	r25, Y+25	; 0x19
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	3f ef       	ldi	r19, 0xFF	; 255
    1c76:	4f e7       	ldi	r20, 0x7F	; 127
    1c78:	57 e4       	ldi	r21, 0x47	; 71
    1c7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c7e:	18 16       	cp	r1, r24
    1c80:	4c f5       	brge	.+82     	; 0x1cd4 <LCD_voidInitialize+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c82:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c84:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c86:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c88:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e2       	ldi	r20, 0x20	; 32
    1c90:	51 e4       	ldi	r21, 0x41	; 65
    1c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9d 8b       	std	Y+21, r25	; 0x15
    1ca8:	8c 8b       	std	Y+20, r24	; 0x14
    1caa:	0f c0       	rjmp	.+30     	; 0x1cca <LCD_voidInitialize+0x42c>
    1cac:	88 ec       	ldi	r24, 0xC8	; 200
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9b 8b       	std	Y+19, r25	; 0x13
    1cb2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cb4:	8a 89       	ldd	r24, Y+18	; 0x12
    1cb6:	9b 89       	ldd	r25, Y+19	; 0x13
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <LCD_voidInitialize+0x41a>
    1cbc:	9b 8b       	std	Y+19, r25	; 0x13
    1cbe:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc0:	8c 89       	ldd	r24, Y+20	; 0x14
    1cc2:	9d 89       	ldd	r25, Y+21	; 0x15
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	9d 8b       	std	Y+21, r25	; 0x15
    1cc8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cca:	8c 89       	ldd	r24, Y+20	; 0x14
    1ccc:	9d 89       	ldd	r25, Y+21	; 0x15
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	69 f7       	brne	.-38     	; 0x1cac <LCD_voidInitialize+0x40e>
    1cd2:	24 c0       	rjmp	.+72     	; 0x1d1c <LCD_voidInitialize+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd4:	6e 89       	ldd	r22, Y+22	; 0x16
    1cd6:	7f 89       	ldd	r23, Y+23	; 0x17
    1cd8:	88 8d       	ldd	r24, Y+24	; 0x18
    1cda:	99 8d       	ldd	r25, Y+25	; 0x19
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9d 8b       	std	Y+21, r25	; 0x15
    1ce6:	8c 8b       	std	Y+20, r24	; 0x14
    1ce8:	8c 89       	ldd	r24, Y+20	; 0x14
    1cea:	9d 89       	ldd	r25, Y+21	; 0x15
    1cec:	99 8b       	std	Y+17, r25	; 0x11
    1cee:	88 8b       	std	Y+16, r24	; 0x10
    1cf0:	88 89       	ldd	r24, Y+16	; 0x10
    1cf2:	99 89       	ldd	r25, Y+17	; 0x11
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <LCD_voidInitialize+0x456>
    1cf8:	99 8b       	std	Y+17, r25	; 0x11
    1cfa:	88 8b       	std	Y+16, r24	; 0x10
    1cfc:	0f c0       	rjmp	.+30     	; 0x1d1c <LCD_voidInitialize+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cfe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d00:	78 a1       	ldd	r23, Y+32	; 0x20
    1d02:	89 a1       	ldd	r24, Y+33	; 0x21
    1d04:	9a a1       	ldd	r25, Y+34	; 0x22
    1d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	8e 8f       	std	Y+30, r24	; 0x1e
    1d10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d12:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d16:	8a 95       	dec	r24
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_voidInitialize+0x478>
    1d1a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(40);
		LCD_voidSendCommand(0b00000001);
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	a0 e0       	ldi	r26, 0x00	; 0
    1d28:	b0 e4       	ldi	r27, 0x40	; 64
    1d2a:	8b 87       	std	Y+11, r24	; 0x0b
    1d2c:	9c 87       	std	Y+12, r25	; 0x0c
    1d2e:	ad 87       	std	Y+13, r26	; 0x0d
    1d30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	4a ef       	ldi	r20, 0xFA	; 250
    1d40:	54 e4       	ldi	r21, 0x44	; 68
    1d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	8f 83       	std	Y+7, r24	; 0x07
    1d4c:	98 87       	std	Y+8, r25	; 0x08
    1d4e:	a9 87       	std	Y+9, r26	; 0x09
    1d50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d52:	6f 81       	ldd	r22, Y+7	; 0x07
    1d54:	78 85       	ldd	r23, Y+8	; 0x08
    1d56:	89 85       	ldd	r24, Y+9	; 0x09
    1d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e8       	ldi	r20, 0x80	; 128
    1d60:	5f e3       	ldi	r21, 0x3F	; 63
    1d62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d66:	88 23       	and	r24, r24
    1d68:	2c f4       	brge	.+10     	; 0x1d74 <LCD_voidInitialize+0x4d6>
		__ticks = 1;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9e 83       	std	Y+6, r25	; 0x06
    1d70:	8d 83       	std	Y+5, r24	; 0x05
    1d72:	3f c0       	rjmp	.+126    	; 0x1df2 <LCD_voidInitialize+0x554>
	else if (__tmp > 65535)
    1d74:	6f 81       	ldd	r22, Y+7	; 0x07
    1d76:	78 85       	ldd	r23, Y+8	; 0x08
    1d78:	89 85       	ldd	r24, Y+9	; 0x09
    1d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	3f ef       	ldi	r19, 0xFF	; 255
    1d80:	4f e7       	ldi	r20, 0x7F	; 127
    1d82:	57 e4       	ldi	r21, 0x47	; 71
    1d84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d88:	18 16       	cp	r1, r24
    1d8a:	4c f5       	brge	.+82     	; 0x1dde <LCD_voidInitialize+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e2       	ldi	r20, 0x20	; 32
    1d9a:	51 e4       	ldi	r21, 0x41	; 65
    1d9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	bc 01       	movw	r22, r24
    1da6:	cd 01       	movw	r24, r26
    1da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9e 83       	std	Y+6, r25	; 0x06
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	0f c0       	rjmp	.+30     	; 0x1dd4 <LCD_voidInitialize+0x536>
    1db6:	88 ec       	ldi	r24, 0xC8	; 200
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	9c 83       	std	Y+4, r25	; 0x04
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <LCD_voidInitialize+0x524>
    1dc6:	9c 83       	std	Y+4, r25	; 0x04
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dca:	8d 81       	ldd	r24, Y+5	; 0x05
    1dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	69 f7       	brne	.-38     	; 0x1db6 <LCD_voidInitialize+0x518>
    1ddc:	14 c0       	rjmp	.+40     	; 0x1e06 <LCD_voidInitialize+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dde:	6f 81       	ldd	r22, Y+7	; 0x07
    1de0:	78 85       	ldd	r23, Y+8	; 0x08
    1de2:	89 85       	ldd	r24, Y+9	; 0x09
    1de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9e 83       	std	Y+6, r25	; 0x06
    1df0:	8d 83       	std	Y+5, r24	; 0x05
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	9e 81       	ldd	r25, Y+6	; 0x06
    1df6:	9a 83       	std	Y+2, r25	; 0x02
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <LCD_voidInitialize+0x560>
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		LCD_voidSendCommand(0b00000110);
    1e06:	86 e0       	ldi	r24, 0x06	; 6
    1e08:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
	}
    1e0c:	c4 5b       	subi	r28, 0xB4	; 180
    1e0e:	df 4f       	sbci	r29, 0xFF	; 255
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	1f 91       	pop	r17
    1e20:	0f 91       	pop	r16
    1e22:	08 95       	ret

00001e24 <LCD_voidSendCommand>:

	void LCD_voidSendCommand(u8 Copy_u8Cmnd)
	{
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	69 97       	sbiw	r28, 0x19	; 25
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	89 8f       	std	Y+25, r24	; 0x19
#if LCD_u8_MODE==LCD_u8_MODE_8BIT
		//RS =0, RW=0
		DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1e3a:	82 e0       	ldi	r24, 0x02	; 2
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	0e 94 29 09 	call	0x1252	; 0x1252 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	61 e0       	ldi	r22, 0x01	; 1
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	0e 94 29 09 	call	0x1252	; 0x1252 <DIO_u8SetPinValue>
		//Write Command
		DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	69 8d       	ldd	r22, Y+25	; 0x19
    1e52:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_u8SetPortValue>
		// E=1
		DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	62 e0       	ldi	r22, 0x02	; 2
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	0e 94 29 09 	call	0x1252	; 0x1252 <DIO_u8SetPinValue>
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a0 e8       	ldi	r26, 0x80	; 128
    1e66:	bf e3       	ldi	r27, 0x3F	; 63
    1e68:	8d 8b       	std	Y+21, r24	; 0x15
    1e6a:	9e 8b       	std	Y+22, r25	; 0x16
    1e6c:	af 8b       	std	Y+23, r26	; 0x17
    1e6e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e70:	6d 89       	ldd	r22, Y+21	; 0x15
    1e72:	7e 89       	ldd	r23, Y+22	; 0x16
    1e74:	8f 89       	ldd	r24, Y+23	; 0x17
    1e76:	98 8d       	ldd	r25, Y+24	; 0x18
    1e78:	2b ea       	ldi	r18, 0xAB	; 171
    1e7a:	3a ea       	ldi	r19, 0xAA	; 170
    1e7c:	4a e2       	ldi	r20, 0x2A	; 42
    1e7e:	50 e4       	ldi	r21, 0x40	; 64
    1e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	89 8b       	std	Y+17, r24	; 0x11
    1e8a:	9a 8b       	std	Y+18, r25	; 0x12
    1e8c:	ab 8b       	std	Y+19, r26	; 0x13
    1e8e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e90:	69 89       	ldd	r22, Y+17	; 0x11
    1e92:	7a 89       	ldd	r23, Y+18	; 0x12
    1e94:	8b 89       	ldd	r24, Y+19	; 0x13
    1e96:	9c 89       	ldd	r25, Y+20	; 0x14
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	1c f4       	brge	.+6      	; 0x1eae <LCD_voidSendCommand+0x8a>
		__ticks = 1;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	88 8b       	std	Y+16, r24	; 0x10
    1eac:	91 c0       	rjmp	.+290    	; 0x1fd0 <LCD_voidSendCommand+0x1ac>
	else if (__tmp > 255)
    1eae:	69 89       	ldd	r22, Y+17	; 0x11
    1eb0:	7a 89       	ldd	r23, Y+18	; 0x12
    1eb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	4f e7       	ldi	r20, 0x7F	; 127
    1ebc:	53 e4       	ldi	r21, 0x43	; 67
    1ebe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ec2:	18 16       	cp	r1, r24
    1ec4:	0c f0       	brlt	.+2      	; 0x1ec8 <LCD_voidSendCommand+0xa4>
    1ec6:	7b c0       	rjmp	.+246    	; 0x1fbe <LCD_voidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1ec8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eca:	7e 89       	ldd	r23, Y+22	; 0x16
    1ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ece:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	4a e7       	ldi	r20, 0x7A	; 122
    1ed6:	54 e4       	ldi	r21, 0x44	; 68
    1ed8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	8c 87       	std	Y+12, r24	; 0x0c
    1ee2:	9d 87       	std	Y+13, r25	; 0x0d
    1ee4:	ae 87       	std	Y+14, r26	; 0x0e
    1ee6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1eea:	7d 85       	ldd	r23, Y+13	; 0x0d
    1eec:	8e 85       	ldd	r24, Y+14	; 0x0e
    1eee:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ef0:	20 e0       	ldi	r18, 0x00	; 0
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	4a ef       	ldi	r20, 0xFA	; 250
    1ef6:	54 e4       	ldi	r21, 0x44	; 68
    1ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	88 87       	std	Y+8, r24	; 0x08
    1f02:	99 87       	std	Y+9, r25	; 0x09
    1f04:	aa 87       	std	Y+10, r26	; 0x0a
    1f06:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f08:	68 85       	ldd	r22, Y+8	; 0x08
    1f0a:	79 85       	ldd	r23, Y+9	; 0x09
    1f0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 e8       	ldi	r20, 0x80	; 128
    1f16:	5f e3       	ldi	r21, 0x3F	; 63
    1f18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f1c:	88 23       	and	r24, r24
    1f1e:	2c f4       	brge	.+10     	; 0x1f2a <LCD_voidSendCommand+0x106>
		__ticks = 1;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9f 83       	std	Y+7, r25	; 0x07
    1f26:	8e 83       	std	Y+6, r24	; 0x06
    1f28:	3f c0       	rjmp	.+126    	; 0x1fa8 <LCD_voidSendCommand+0x184>
	else if (__tmp > 65535)
    1f2a:	68 85       	ldd	r22, Y+8	; 0x08
    1f2c:	79 85       	ldd	r23, Y+9	; 0x09
    1f2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f30:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	3f ef       	ldi	r19, 0xFF	; 255
    1f36:	4f e7       	ldi	r20, 0x7F	; 127
    1f38:	57 e4       	ldi	r21, 0x47	; 71
    1f3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f3e:	18 16       	cp	r1, r24
    1f40:	4c f5       	brge	.+82     	; 0x1f94 <LCD_voidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f42:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f44:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f46:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f48:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e2       	ldi	r20, 0x20	; 32
    1f50:	51 e4       	ldi	r21, 0x41	; 65
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	cd 01       	movw	r24, r26
    1f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9f 83       	std	Y+7, r25	; 0x07
    1f68:	8e 83       	std	Y+6, r24	; 0x06
    1f6a:	0f c0       	rjmp	.+30     	; 0x1f8a <LCD_voidSendCommand+0x166>
    1f6c:	88 ec       	ldi	r24, 0xC8	; 200
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	9d 83       	std	Y+5, r25	; 0x05
    1f72:	8c 83       	std	Y+4, r24	; 0x04
    1f74:	8c 81       	ldd	r24, Y+4	; 0x04
    1f76:	9d 81       	ldd	r25, Y+5	; 0x05
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <LCD_voidSendCommand+0x154>
    1f7c:	9d 83       	std	Y+5, r25	; 0x05
    1f7e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f80:	8e 81       	ldd	r24, Y+6	; 0x06
    1f82:	9f 81       	ldd	r25, Y+7	; 0x07
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	9f 83       	std	Y+7, r25	; 0x07
    1f88:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f8e:	00 97       	sbiw	r24, 0x00	; 0
    1f90:	69 f7       	brne	.-38     	; 0x1f6c <LCD_voidSendCommand+0x148>
    1f92:	24 c0       	rjmp	.+72     	; 0x1fdc <LCD_voidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f94:	68 85       	ldd	r22, Y+8	; 0x08
    1f96:	79 85       	ldd	r23, Y+9	; 0x09
    1f98:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f9a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	9f 83       	std	Y+7, r25	; 0x07
    1fa6:	8e 83       	std	Y+6, r24	; 0x06
    1fa8:	8e 81       	ldd	r24, Y+6	; 0x06
    1faa:	9f 81       	ldd	r25, Y+7	; 0x07
    1fac:	9b 83       	std	Y+3, r25	; 0x03
    1fae:	8a 83       	std	Y+2, r24	; 0x02
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <LCD_voidSendCommand+0x190>
    1fb8:	9b 83       	std	Y+3, r25	; 0x03
    1fba:	8a 83       	std	Y+2, r24	; 0x02
    1fbc:	0f c0       	rjmp	.+30     	; 0x1fdc <LCD_voidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fbe:	69 89       	ldd	r22, Y+17	; 0x11
    1fc0:	7a 89       	ldd	r23, Y+18	; 0x12
    1fc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	88 8b       	std	Y+16, r24	; 0x10
    1fd0:	88 89       	ldd	r24, Y+16	; 0x10
    1fd2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	8a 95       	dec	r24
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <LCD_voidSendCommand+0x1b2>
    1fda:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		//E=0
		DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    1fdc:	82 e0       	ldi	r24, 0x02	; 2
    1fde:	62 e0       	ldi	r22, 0x02	; 2
    1fe0:	40 e0       	ldi	r20, 0x00	; 0
    1fe2:	0e 94 29 09 	call	0x1252	; 0x1252 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
		_delay_us(1);
		//E=0
		DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
#endif
	}
    1fe6:	69 96       	adiw	r28, 0x19	; 25
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <LCD_voidSendCharacter>:
	
	void LCD_voidSendCharacter(u8 Copy_u8char)
	{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	69 97       	sbiw	r28, 0x19	; 25
    2002:	0f b6       	in	r0, 0x3f	; 63
    2004:	f8 94       	cli
    2006:	de bf       	out	0x3e, r29	; 62
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	cd bf       	out	0x3d, r28	; 61
    200c:	89 8f       	std	Y+25, r24	; 0x19
		//RS =1, RW=0
		DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    200e:	82 e0       	ldi	r24, 0x02	; 2
    2010:	60 e0       	ldi	r22, 0x00	; 0
    2012:	41 e0       	ldi	r20, 0x01	; 1
    2014:	0e 94 29 09 	call	0x1252	; 0x1252 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2018:	82 e0       	ldi	r24, 0x02	; 2
    201a:	61 e0       	ldi	r22, 0x01	; 1
    201c:	40 e0       	ldi	r20, 0x00	; 0
    201e:	0e 94 29 09 	call	0x1252	; 0x1252 <DIO_u8SetPinValue>
		//Write Character
		DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8char);
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	69 8d       	ldd	r22, Y+25	; 0x19
    2026:	0e 94 af 0b 	call	0x175e	; 0x175e <DIO_u8SetPortValue>
		// E=1
		DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    202a:	82 e0       	ldi	r24, 0x02	; 2
    202c:	62 e0       	ldi	r22, 0x02	; 2
    202e:	41 e0       	ldi	r20, 0x01	; 1
    2030:	0e 94 29 09 	call	0x1252	; 0x1252 <DIO_u8SetPinValue>
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 e8       	ldi	r26, 0x80	; 128
    203a:	bf e3       	ldi	r27, 0x3F	; 63
    203c:	8d 8b       	std	Y+21, r24	; 0x15
    203e:	9e 8b       	std	Y+22, r25	; 0x16
    2040:	af 8b       	std	Y+23, r26	; 0x17
    2042:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2044:	6d 89       	ldd	r22, Y+21	; 0x15
    2046:	7e 89       	ldd	r23, Y+22	; 0x16
    2048:	8f 89       	ldd	r24, Y+23	; 0x17
    204a:	98 8d       	ldd	r25, Y+24	; 0x18
    204c:	2b ea       	ldi	r18, 0xAB	; 171
    204e:	3a ea       	ldi	r19, 0xAA	; 170
    2050:	4a e2       	ldi	r20, 0x2A	; 42
    2052:	50 e4       	ldi	r21, 0x40	; 64
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	89 8b       	std	Y+17, r24	; 0x11
    205e:	9a 8b       	std	Y+18, r25	; 0x12
    2060:	ab 8b       	std	Y+19, r26	; 0x13
    2062:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2064:	69 89       	ldd	r22, Y+17	; 0x11
    2066:	7a 89       	ldd	r23, Y+18	; 0x12
    2068:	8b 89       	ldd	r24, Y+19	; 0x13
    206a:	9c 89       	ldd	r25, Y+20	; 0x14
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e8       	ldi	r20, 0x80	; 128
    2072:	5f e3       	ldi	r21, 0x3F	; 63
    2074:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2078:	88 23       	and	r24, r24
    207a:	1c f4       	brge	.+6      	; 0x2082 <LCD_voidSendCharacter+0x8a>
		__ticks = 1;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	88 8b       	std	Y+16, r24	; 0x10
    2080:	91 c0       	rjmp	.+290    	; 0x21a4 <LCD_voidSendCharacter+0x1ac>
	else if (__tmp > 255)
    2082:	69 89       	ldd	r22, Y+17	; 0x11
    2084:	7a 89       	ldd	r23, Y+18	; 0x12
    2086:	8b 89       	ldd	r24, Y+19	; 0x13
    2088:	9c 89       	ldd	r25, Y+20	; 0x14
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	4f e7       	ldi	r20, 0x7F	; 127
    2090:	53 e4       	ldi	r21, 0x43	; 67
    2092:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2096:	18 16       	cp	r1, r24
    2098:	0c f0       	brlt	.+2      	; 0x209c <LCD_voidSendCharacter+0xa4>
    209a:	7b c0       	rjmp	.+246    	; 0x2192 <LCD_voidSendCharacter+0x19a>
	{
		_delay_ms(__us / 1000.0);
    209c:	6d 89       	ldd	r22, Y+21	; 0x15
    209e:	7e 89       	ldd	r23, Y+22	; 0x16
    20a0:	8f 89       	ldd	r24, Y+23	; 0x17
    20a2:	98 8d       	ldd	r25, Y+24	; 0x18
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	4a e7       	ldi	r20, 0x7A	; 122
    20aa:	54 e4       	ldi	r21, 0x44	; 68
    20ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	8c 87       	std	Y+12, r24	; 0x0c
    20b6:	9d 87       	std	Y+13, r25	; 0x0d
    20b8:	ae 87       	std	Y+14, r26	; 0x0e
    20ba:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20bc:	6c 85       	ldd	r22, Y+12	; 0x0c
    20be:	7d 85       	ldd	r23, Y+13	; 0x0d
    20c0:	8e 85       	ldd	r24, Y+14	; 0x0e
    20c2:	9f 85       	ldd	r25, Y+15	; 0x0f
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	4a ef       	ldi	r20, 0xFA	; 250
    20ca:	54 e4       	ldi	r21, 0x44	; 68
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	88 87       	std	Y+8, r24	; 0x08
    20d6:	99 87       	std	Y+9, r25	; 0x09
    20d8:	aa 87       	std	Y+10, r26	; 0x0a
    20da:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20dc:	68 85       	ldd	r22, Y+8	; 0x08
    20de:	79 85       	ldd	r23, Y+9	; 0x09
    20e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	40 e8       	ldi	r20, 0x80	; 128
    20ea:	5f e3       	ldi	r21, 0x3F	; 63
    20ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f0:	88 23       	and	r24, r24
    20f2:	2c f4       	brge	.+10     	; 0x20fe <LCD_voidSendCharacter+0x106>
		__ticks = 1;
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9f 83       	std	Y+7, r25	; 0x07
    20fa:	8e 83       	std	Y+6, r24	; 0x06
    20fc:	3f c0       	rjmp	.+126    	; 0x217c <LCD_voidSendCharacter+0x184>
	else if (__tmp > 65535)
    20fe:	68 85       	ldd	r22, Y+8	; 0x08
    2100:	79 85       	ldd	r23, Y+9	; 0x09
    2102:	8a 85       	ldd	r24, Y+10	; 0x0a
    2104:	9b 85       	ldd	r25, Y+11	; 0x0b
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	3f ef       	ldi	r19, 0xFF	; 255
    210a:	4f e7       	ldi	r20, 0x7F	; 127
    210c:	57 e4       	ldi	r21, 0x47	; 71
    210e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2112:	18 16       	cp	r1, r24
    2114:	4c f5       	brge	.+82     	; 0x2168 <LCD_voidSendCharacter+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2116:	6c 85       	ldd	r22, Y+12	; 0x0c
    2118:	7d 85       	ldd	r23, Y+13	; 0x0d
    211a:	8e 85       	ldd	r24, Y+14	; 0x0e
    211c:	9f 85       	ldd	r25, Y+15	; 0x0f
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	40 e2       	ldi	r20, 0x20	; 32
    2124:	51 e4       	ldi	r21, 0x41	; 65
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	bc 01       	movw	r22, r24
    2130:	cd 01       	movw	r24, r26
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9f 83       	std	Y+7, r25	; 0x07
    213c:	8e 83       	std	Y+6, r24	; 0x06
    213e:	0f c0       	rjmp	.+30     	; 0x215e <LCD_voidSendCharacter+0x166>
    2140:	88 ec       	ldi	r24, 0xC8	; 200
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	9d 83       	std	Y+5, r25	; 0x05
    2146:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2148:	8c 81       	ldd	r24, Y+4	; 0x04
    214a:	9d 81       	ldd	r25, Y+5	; 0x05
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <LCD_voidSendCharacter+0x154>
    2150:	9d 83       	std	Y+5, r25	; 0x05
    2152:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2154:	8e 81       	ldd	r24, Y+6	; 0x06
    2156:	9f 81       	ldd	r25, Y+7	; 0x07
    2158:	01 97       	sbiw	r24, 0x01	; 1
    215a:	9f 83       	std	Y+7, r25	; 0x07
    215c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215e:	8e 81       	ldd	r24, Y+6	; 0x06
    2160:	9f 81       	ldd	r25, Y+7	; 0x07
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	69 f7       	brne	.-38     	; 0x2140 <LCD_voidSendCharacter+0x148>
    2166:	24 c0       	rjmp	.+72     	; 0x21b0 <LCD_voidSendCharacter+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2168:	68 85       	ldd	r22, Y+8	; 0x08
    216a:	79 85       	ldd	r23, Y+9	; 0x09
    216c:	8a 85       	ldd	r24, Y+10	; 0x0a
    216e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9f 83       	std	Y+7, r25	; 0x07
    217a:	8e 83       	std	Y+6, r24	; 0x06
    217c:	8e 81       	ldd	r24, Y+6	; 0x06
    217e:	9f 81       	ldd	r25, Y+7	; 0x07
    2180:	9b 83       	std	Y+3, r25	; 0x03
    2182:	8a 83       	std	Y+2, r24	; 0x02
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	9b 81       	ldd	r25, Y+3	; 0x03
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <LCD_voidSendCharacter+0x190>
    218c:	9b 83       	std	Y+3, r25	; 0x03
    218e:	8a 83       	std	Y+2, r24	; 0x02
    2190:	0f c0       	rjmp	.+30     	; 0x21b0 <LCD_voidSendCharacter+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2192:	69 89       	ldd	r22, Y+17	; 0x11
    2194:	7a 89       	ldd	r23, Y+18	; 0x12
    2196:	8b 89       	ldd	r24, Y+19	; 0x13
    2198:	9c 89       	ldd	r25, Y+20	; 0x14
    219a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	88 8b       	std	Y+16, r24	; 0x10
    21a4:	88 89       	ldd	r24, Y+16	; 0x10
    21a6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	8a 95       	dec	r24
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <LCD_voidSendCharacter+0x1b2>
    21ae:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(1);
		//E=0
		DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	62 e0       	ldi	r22, 0x02	; 2
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	0e 94 29 09 	call	0x1252	; 0x1252 <DIO_u8SetPinValue>
	}
    21ba:	69 96       	adiw	r28, 0x19	; 25
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <LCD_voidSendString>:
	
	
	void LCD_voidSendString(u8* Copy_Pu8String)
	{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <LCD_voidSendString+0x6>
    21d2:	0f 92       	push	r0
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
    21d8:	9b 83       	std	Y+3, r25	; 0x03
    21da:	8a 83       	std	Y+2, r24	; 0x02
		u8 Local_u8Iterator=0;
    21dc:	19 82       	std	Y+1, r1	; 0x01
    21de:	0e c0       	rjmp	.+28     	; 0x21fc <LCD_voidSendString+0x30>
		while(Copy_Pu8String[Local_u8Iterator]!='\0')
		{
			LCD_voidSendCharacter(Copy_Pu8String[Local_u8Iterator]);
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ea:	fc 01       	movw	r30, r24
    21ec:	e2 0f       	add	r30, r18
    21ee:	f3 1f       	adc	r31, r19
    21f0:	80 81       	ld	r24, Z
    21f2:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_voidSendCharacter>
			Local_u8Iterator++;
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	8f 5f       	subi	r24, 0xFF	; 255
    21fa:	89 83       	std	Y+1, r24	; 0x01
	
	
	void LCD_voidSendString(u8* Copy_Pu8String)
	{
		u8 Local_u8Iterator=0;
		while(Copy_Pu8String[Local_u8Iterator]!='\0')
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	9b 81       	ldd	r25, Y+3	; 0x03
    2206:	fc 01       	movw	r30, r24
    2208:	e2 0f       	add	r30, r18
    220a:	f3 1f       	adc	r31, r19
    220c:	80 81       	ld	r24, Z
    220e:	88 23       	and	r24, r24
    2210:	39 f7       	brne	.-50     	; 0x21e0 <LCD_voidSendString+0x14>
		{
			LCD_voidSendCharacter(Copy_Pu8String[Local_u8Iterator]);
			Local_u8Iterator++;
		}
	}
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	cf 91       	pop	r28
    221a:	df 91       	pop	r29
    221c:	08 95       	ret

0000221e <LCD_voidSendNumber>:
	
	
	void LCD_voidSendNumber(u32 Copy_u8Number)
	{
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	62 97       	sbiw	r28, 0x12	; 18
    2228:	0f b6       	in	r0, 0x3f	; 63
    222a:	f8 94       	cli
    222c:	de bf       	out	0x3e, r29	; 62
    222e:	0f be       	out	0x3f, r0	; 63
    2230:	cd bf       	out	0x3d, r28	; 61
    2232:	9a 8b       	std	Y+18, r25	; 0x12
    2234:	89 8b       	std	Y+17, r24	; 0x11
		u32 Local_u8TempNumber=0,Local_u8Modulus=0;
    2236:	1e 82       	std	Y+6, r1	; 0x06
    2238:	1d 82       	std	Y+5, r1	; 0x05
    223a:	1c 82       	std	Y+4, r1	; 0x04
    223c:	1b 82       	std	Y+3, r1	; 0x03
		u32 Local_Au8Number[5]={0,0,0,0,0};
    223e:	8a e0       	ldi	r24, 0x0A	; 10
    2240:	fe 01       	movw	r30, r28
    2242:	37 96       	adiw	r30, 0x07	; 7
    2244:	df 01       	movw	r26, r30
    2246:	98 2f       	mov	r25, r24
    2248:	1d 92       	st	X+, r1
    224a:	9a 95       	dec	r25
    224c:	e9 f7       	brne	.-6      	; 0x2248 <LCD_voidSendNumber+0x2a>
		u8 i=0;
    224e:	1a 82       	std	Y+2, r1	; 0x02
    2250:	23 c0       	rjmp	.+70     	; 0x2298 <LCD_voidSendNumber+0x7a>
		while(Copy_u8Number){
		    Local_Au8Number[i]=(Copy_u8Number%10);
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	e8 2f       	mov	r30, r24
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	89 89       	ldd	r24, Y+17	; 0x11
    225a:	9a 89       	ldd	r25, Y+18	; 0x12
    225c:	2a e0       	ldi	r18, 0x0A	; 10
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	b9 01       	movw	r22, r18
    2262:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__udivmodhi4>
    2266:	ac 01       	movw	r20, r24
    2268:	9f 01       	movw	r18, r30
    226a:	22 0f       	add	r18, r18
    226c:	33 1f       	adc	r19, r19
    226e:	ce 01       	movw	r24, r28
    2270:	01 96       	adiw	r24, 0x01	; 1
    2272:	82 0f       	add	r24, r18
    2274:	93 1f       	adc	r25, r19
    2276:	fc 01       	movw	r30, r24
    2278:	36 96       	adiw	r30, 0x06	; 6
    227a:	51 83       	std	Z+1, r21	; 0x01
    227c:	40 83       	st	Z, r20
		    Copy_u8Number/=10;
    227e:	89 89       	ldd	r24, Y+17	; 0x11
    2280:	9a 89       	ldd	r25, Y+18	; 0x12
    2282:	2a e0       	ldi	r18, 0x0A	; 10
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	b9 01       	movw	r22, r18
    2288:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__udivmodhi4>
    228c:	cb 01       	movw	r24, r22
    228e:	9a 8b       	std	Y+18, r25	; 0x12
    2290:	89 8b       	std	Y+17, r24	; 0x11
		    i++;
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	8f 5f       	subi	r24, 0xFF	; 255
    2296:	8a 83       	std	Y+2, r24	; 0x02
	void LCD_voidSendNumber(u32 Copy_u8Number)
	{
		u32 Local_u8TempNumber=0,Local_u8Modulus=0;
		u32 Local_Au8Number[5]={0,0,0,0,0};
		u8 i=0;
		while(Copy_u8Number){
    2298:	89 89       	ldd	r24, Y+17	; 0x11
    229a:	9a 89       	ldd	r25, Y+18	; 0x12
    229c:	00 97       	sbiw	r24, 0x00	; 0
    229e:	c9 f6       	brne	.-78     	; 0x2252 <LCD_voidSendNumber+0x34>
		    Copy_u8Number/=10;
		    i++;
		}
		while(1)
		{
			if(i<=0)
    22a0:	8a 81       	ldd	r24, Y+2	; 0x02
    22a2:	88 23       	and	r24, r24
    22a4:	c1 f0       	breq	.+48     	; 0x22d6 <LCD_voidSendNumber+0xb8>
				break;
			u8 Character=(Local_Au8Number[i-1]+'0');
    22a6:	8a 81       	ldd	r24, Y+2	; 0x02
    22a8:	88 2f       	mov	r24, r24
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	9c 01       	movw	r18, r24
    22b0:	22 0f       	add	r18, r18
    22b2:	33 1f       	adc	r19, r19
    22b4:	ce 01       	movw	r24, r28
    22b6:	01 96       	adiw	r24, 0x01	; 1
    22b8:	82 0f       	add	r24, r18
    22ba:	93 1f       	adc	r25, r19
    22bc:	fc 01       	movw	r30, r24
    22be:	36 96       	adiw	r30, 0x06	; 6
    22c0:	80 81       	ld	r24, Z
    22c2:	91 81       	ldd	r25, Z+1	; 0x01
    22c4:	80 5d       	subi	r24, 0xD0	; 208
    22c6:	89 83       	std	Y+1, r24	; 0x01
			LCD_voidSendCharacter(Character);
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_voidSendCharacter>
			i--;
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	81 50       	subi	r24, 0x01	; 1
    22d2:	8a 83       	std	Y+2, r24	; 0x02
    22d4:	e5 cf       	rjmp	.-54     	; 0x22a0 <LCD_voidSendNumber+0x82>

		}
		
	}
    22d6:	62 96       	adiw	r28, 0x12	; 18
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <LCD_u8GoToXY>:
	
	u8 LCD_u8GoToXY(u8 Copy_u8LineNumebr,u8 Copy_u8Location)
	{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <LCD_u8GoToXY+0x6>
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <LCD_u8GoToXY+0x8>
    22f0:	0f 92       	push	r0
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	8a 83       	std	Y+2, r24	; 0x02
    22f8:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8_ErrorState=STD_TYPES_OK;
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	89 83       	std	Y+1, r24	; 0x01
		if(Copy_u8Location<=39)
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	88 32       	cpi	r24, 0x28	; 40
    2302:	e0 f4       	brcc	.+56     	; 0x233c <LCD_u8GoToXY+0x54>
		{
			switch(Copy_u8LineNumebr)
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	3d 83       	std	Y+5, r19	; 0x05
    230c:	2c 83       	std	Y+4, r18	; 0x04
    230e:	8c 81       	ldd	r24, Y+4	; 0x04
    2310:	9d 81       	ldd	r25, Y+5	; 0x05
    2312:	81 30       	cpi	r24, 0x01	; 1
    2314:	91 05       	cpc	r25, r1
    2316:	31 f0       	breq	.+12     	; 0x2324 <LCD_u8GoToXY+0x3c>
    2318:	2c 81       	ldd	r18, Y+4	; 0x04
    231a:	3d 81       	ldd	r19, Y+5	; 0x05
    231c:	22 30       	cpi	r18, 0x02	; 2
    231e:	31 05       	cpc	r19, r1
    2320:	31 f0       	breq	.+12     	; 0x232e <LCD_u8GoToXY+0x46>
    2322:	0a c0       	rjmp	.+20     	; 0x2338 <LCD_u8GoToXY+0x50>
			{
				case LCD_u8_LINE1:
					LCD_voidSendCommand(0x80+Copy_u8Location);
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	80 58       	subi	r24, 0x80	; 128
    2328:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    232c:	08 c0       	rjmp	.+16     	; 0x233e <LCD_u8GoToXY+0x56>
					break;
				case LCD_u8_LINE2:
					LCD_voidSendCommand(0xC0+Copy_u8Location);
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	80 54       	subi	r24, 0x40	; 64
    2332:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    2336:	03 c0       	rjmp	.+6      	; 0x233e <LCD_u8GoToXY+0x56>
					break;
				default:
					Local_u8_ErrorState=STD_TYPES_NOT_OK;
    2338:	19 82       	std	Y+1, r1	; 0x01
    233a:	01 c0       	rjmp	.+2      	; 0x233e <LCD_u8GoToXY+0x56>
					
			}
		}
		else
		{
			Local_u8_ErrorState=STD_TYPES_NOT_OK;
    233c:	19 82       	std	Y+1, r1	; 0x01
		}
		
		return Local_u8_ErrorState;
    233e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <LCD_u8SendSpecialCharacter>:
	
	u8 LCD_u8SendSpecialCharacter(u8 Copy_u8CharNumber,u8* Copy_Pu8Patterns,u8 Copy_u8LineNumebr,u8 Copy_u8Location)
	{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	29 97       	sbiw	r28, 0x09	; 9
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	8b 83       	std	Y+3, r24	; 0x03
    2366:	7d 83       	std	Y+5, r23	; 0x05
    2368:	6c 83       	std	Y+4, r22	; 0x04
    236a:	4e 83       	std	Y+6, r20	; 0x06
    236c:	2f 83       	std	Y+7, r18	; 0x07
		u8 Local_u8_ErrorState=STD_TYPES_OK;
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	8a 83       	std	Y+2, r24	; 0x02
		if(Copy_u8Location<=39 &&((Copy_u8LineNumebr==LCD_u8_LINE1)||(Copy_u8LineNumebr==LCD_u8_LINE2)))
    2372:	8f 81       	ldd	r24, Y+7	; 0x07
    2374:	88 32       	cpi	r24, 0x28	; 40
    2376:	08 f0       	brcs	.+2      	; 0x237a <LCD_u8SendSpecialCharacter+0x2a>
    2378:	76 c0       	rjmp	.+236    	; 0x2466 <LCD_u8SendSpecialCharacter+0x116>
    237a:	8e 81       	ldd	r24, Y+6	; 0x06
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	21 f0       	breq	.+8      	; 0x2388 <LCD_u8SendSpecialCharacter+0x38>
    2380:	8e 81       	ldd	r24, Y+6	; 0x06
    2382:	82 30       	cpi	r24, 0x02	; 2
    2384:	09 f0       	breq	.+2      	; 0x2388 <LCD_u8SendSpecialCharacter+0x38>
    2386:	6f c0       	rjmp	.+222    	; 0x2466 <LCD_u8SendSpecialCharacter+0x116>
		{
			switch(Copy_u8CharNumber)
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	39 87       	std	Y+9, r19	; 0x09
    2390:	28 87       	std	Y+8, r18	; 0x08
    2392:	88 85       	ldd	r24, Y+8	; 0x08
    2394:	99 85       	ldd	r25, Y+9	; 0x09
    2396:	83 30       	cpi	r24, 0x03	; 3
    2398:	91 05       	cpc	r25, r1
    239a:	a9 f1       	breq	.+106    	; 0x2406 <LCD_u8SendSpecialCharacter+0xb6>
    239c:	28 85       	ldd	r18, Y+8	; 0x08
    239e:	39 85       	ldd	r19, Y+9	; 0x09
    23a0:	24 30       	cpi	r18, 0x04	; 4
    23a2:	31 05       	cpc	r19, r1
    23a4:	7c f4       	brge	.+30     	; 0x23c4 <LCD_u8SendSpecialCharacter+0x74>
    23a6:	88 85       	ldd	r24, Y+8	; 0x08
    23a8:	99 85       	ldd	r25, Y+9	; 0x09
    23aa:	81 30       	cpi	r24, 0x01	; 1
    23ac:	91 05       	cpc	r25, r1
    23ae:	19 f1       	breq	.+70     	; 0x23f6 <LCD_u8SendSpecialCharacter+0xa6>
    23b0:	28 85       	ldd	r18, Y+8	; 0x08
    23b2:	39 85       	ldd	r19, Y+9	; 0x09
    23b4:	22 30       	cpi	r18, 0x02	; 2
    23b6:	31 05       	cpc	r19, r1
    23b8:	14 f5       	brge	.+68     	; 0x23fe <LCD_u8SendSpecialCharacter+0xae>
    23ba:	88 85       	ldd	r24, Y+8	; 0x08
    23bc:	99 85       	ldd	r25, Y+9	; 0x09
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	b1 f0       	breq	.+44     	; 0x23ee <LCD_u8SendSpecialCharacter+0x9e>
    23c2:	35 c0       	rjmp	.+106    	; 0x242e <LCD_u8SendSpecialCharacter+0xde>
    23c4:	28 85       	ldd	r18, Y+8	; 0x08
    23c6:	39 85       	ldd	r19, Y+9	; 0x09
    23c8:	25 30       	cpi	r18, 0x05	; 5
    23ca:	31 05       	cpc	r19, r1
    23cc:	21 f1       	breq	.+72     	; 0x2416 <LCD_u8SendSpecialCharacter+0xc6>
    23ce:	88 85       	ldd	r24, Y+8	; 0x08
    23d0:	99 85       	ldd	r25, Y+9	; 0x09
    23d2:	85 30       	cpi	r24, 0x05	; 5
    23d4:	91 05       	cpc	r25, r1
    23d6:	dc f0       	brlt	.+54     	; 0x240e <LCD_u8SendSpecialCharacter+0xbe>
    23d8:	28 85       	ldd	r18, Y+8	; 0x08
    23da:	39 85       	ldd	r19, Y+9	; 0x09
    23dc:	26 30       	cpi	r18, 0x06	; 6
    23de:	31 05       	cpc	r19, r1
    23e0:	f1 f0       	breq	.+60     	; 0x241e <LCD_u8SendSpecialCharacter+0xce>
    23e2:	88 85       	ldd	r24, Y+8	; 0x08
    23e4:	99 85       	ldd	r25, Y+9	; 0x09
    23e6:	87 30       	cpi	r24, 0x07	; 7
    23e8:	91 05       	cpc	r25, r1
    23ea:	e9 f0       	breq	.+58     	; 0x2426 <LCD_u8SendSpecialCharacter+0xd6>
    23ec:	20 c0       	rjmp	.+64     	; 0x242e <LCD_u8SendSpecialCharacter+0xde>
			{
				case FIRST_CHARACTER_LOCATION:
					LCD_voidSendCommand(0b01000000);
    23ee:	80 e4       	ldi	r24, 0x40	; 64
    23f0:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    23f4:	1d c0       	rjmp	.+58     	; 0x2430 <LCD_u8SendSpecialCharacter+0xe0>
					break;
				case SECOND_CHARACTER_LOCATION:
					LCD_voidSendCommand(0b01001000);
    23f6:	88 e4       	ldi	r24, 0x48	; 72
    23f8:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    23fc:	19 c0       	rjmp	.+50     	; 0x2430 <LCD_u8SendSpecialCharacter+0xe0>
					break;
				case THIRD_CHARACTER_LOCATION:
					LCD_voidSendCommand(0b01010000);
    23fe:	80 e5       	ldi	r24, 0x50	; 80
    2400:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    2404:	15 c0       	rjmp	.+42     	; 0x2430 <LCD_u8SendSpecialCharacter+0xe0>
					break;
				case FOURTH_CHARACTER_LOCATION:
					LCD_voidSendCommand(0b01011000);
    2406:	88 e5       	ldi	r24, 0x58	; 88
    2408:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    240c:	11 c0       	rjmp	.+34     	; 0x2430 <LCD_u8SendSpecialCharacter+0xe0>
					break;
				case FIFTH_CHARACTER_LOCATION:
					LCD_voidSendCommand(0b01100000);
    240e:	80 e6       	ldi	r24, 0x60	; 96
    2410:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    2414:	0d c0       	rjmp	.+26     	; 0x2430 <LCD_u8SendSpecialCharacter+0xe0>
					break;
				case SIXTH_CHARACTER_LOCATION:
					LCD_voidSendCommand(0b01101000);
    2416:	88 e6       	ldi	r24, 0x68	; 104
    2418:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    241c:	09 c0       	rjmp	.+18     	; 0x2430 <LCD_u8SendSpecialCharacter+0xe0>
					break;
				case SEVENTH_CHARACTER_LOCATION:
					LCD_voidSendCommand(0b01110000);
    241e:	80 e7       	ldi	r24, 0x70	; 112
    2420:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    2424:	05 c0       	rjmp	.+10     	; 0x2430 <LCD_u8SendSpecialCharacter+0xe0>
					break;
				case EIGHTH_CHARACTER_LOCATION:
					LCD_voidSendCommand(0b01111000);
    2426:	88 e7       	ldi	r24, 0x78	; 120
    2428:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    242c:	01 c0       	rjmp	.+2      	; 0x2430 <LCD_u8SendSpecialCharacter+0xe0>
					break;
				default:
					Local_u8_ErrorState=STD_TYPES_NOT_OK;
    242e:	1a 82       	std	Y+2, r1	; 0x02
					break;
			}
			for(u8 i=0;i<8;i++)
    2430:	19 82       	std	Y+1, r1	; 0x01
    2432:	0e c0       	rjmp	.+28     	; 0x2450 <LCD_u8SendSpecialCharacter+0x100>
			{
				LCD_voidSendCharacter(Copy_Pu8Patterns[i]);
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	8c 81       	ldd	r24, Y+4	; 0x04
    243c:	9d 81       	ldd	r25, Y+5	; 0x05
    243e:	fc 01       	movw	r30, r24
    2440:	e2 0f       	add	r30, r18
    2442:	f3 1f       	adc	r31, r19
    2444:	80 81       	ld	r24, Z
    2446:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_voidSendCharacter>
					break;
				default:
					Local_u8_ErrorState=STD_TYPES_NOT_OK;
					break;
			}
			for(u8 i=0;i<8;i++)
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	8f 5f       	subi	r24, 0xFF	; 255
    244e:	89 83       	std	Y+1, r24	; 0x01
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	88 30       	cpi	r24, 0x08	; 8
    2454:	78 f3       	brcs	.-34     	; 0x2434 <LCD_u8SendSpecialCharacter+0xe4>
			{
				LCD_voidSendCharacter(Copy_Pu8Patterns[i]);
			}
			LCD_u8GoToXY(Copy_u8LineNumebr,Copy_u8Location);
    2456:	8e 81       	ldd	r24, Y+6	; 0x06
    2458:	6f 81       	ldd	r22, Y+7	; 0x07
    245a:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_u8GoToXY>
			LCD_voidSendCharacter(Copy_u8CharNumber);
    245e:	8b 81       	ldd	r24, Y+3	; 0x03
    2460:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <LCD_voidSendCharacter>
    2464:	01 c0       	rjmp	.+2      	; 0x2468 <LCD_u8SendSpecialCharacter+0x118>
		}
		else
		{
			Local_u8_ErrorState=STD_TYPES_NOT_OK;
    2466:	1a 82       	std	Y+2, r1	; 0x02
		}
		
		return Local_u8_ErrorState;
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    246a:	29 96       	adiw	r28, 0x09	; 9
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <main>:
#include"ADC_Interface.h"
#include"LCD_Interface.h"
#define F_CPU 8000000UL
#include<util/delay.h>
int main(void)
{
    247c:	0f 93       	push	r16
    247e:	1f 93       	push	r17
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	cd b7       	in	r28, 0x3d	; 61
    2486:	de b7       	in	r29, 0x3e	; 62
    2488:	c0 56       	subi	r28, 0x60	; 96
    248a:	d0 40       	sbci	r29, 0x00	; 0
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
	u16 Local_u16AnalougeValue1;
	u16 Local_u16DigitalValue2;
	u16 Local_u16AnalougeValue2;
	u16 Local_u16DigitalValue3;
	u16 Local_u16AnalougeValue3;
	DioInit();
    2496:	0e 94 de 07 	call	0xfbc	; 0xfbc <DioInit>
	ADC_voidInit();
    249a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_voidInit>
	LCD_voidInitialize();
    249e:	0e 94 4f 0c 	call	0x189e	; 0x189e <LCD_voidInitialize>
	while(1)
	{
		ADC_u8GetDigitalValue(ADC_u8_CHANNEL_0,&Local_u16DigitalValue1);
    24a2:	9e 01       	movw	r18, r28
    24a4:	25 5a       	subi	r18, 0xA5	; 165
    24a6:	3f 4f       	sbci	r19, 0xFF	; 255
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	b9 01       	movw	r22, r18
    24ac:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_u8GetDigitalValue>
		ADC_u8GetDigitalValue(ADC_u8_CHANNEL_1,&Local_u16DigitalValue2);
    24b0:	9e 01       	movw	r18, r28
    24b2:	23 5a       	subi	r18, 0xA3	; 163
    24b4:	3f 4f       	sbci	r19, 0xFF	; 255
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	b9 01       	movw	r22, r18
    24ba:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_u8GetDigitalValue>
		ADC_u8GetDigitalValue(ADC_u8_CHANNEL_2,&Local_u16DigitalValue3);
    24be:	9e 01       	movw	r18, r28
    24c0:	21 5a       	subi	r18, 0xA1	; 161
    24c2:	3f 4f       	sbci	r19, 0xFF	; 255
    24c4:	82 e0       	ldi	r24, 0x02	; 2
    24c6:	b9 01       	movw	r22, r18
    24c8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_u8GetDigitalValue>
		Local_u16AnalougeValue1 = (u16)((Local_u16DigitalValue1 * 5000UL) / 1024);
    24cc:	fe 01       	movw	r30, r28
    24ce:	e5 5a       	subi	r30, 0xA5	; 165
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	80 81       	ld	r24, Z
    24d4:	91 81       	ldd	r25, Z+1	; 0x01
    24d6:	cc 01       	movw	r24, r24
    24d8:	a0 e0       	ldi	r26, 0x00	; 0
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	28 e8       	ldi	r18, 0x88	; 136
    24de:	33 e1       	ldi	r19, 0x13	; 19
    24e0:	40 e0       	ldi	r20, 0x00	; 0
    24e2:	50 e0       	ldi	r21, 0x00	; 0
    24e4:	bc 01       	movw	r22, r24
    24e6:	cd 01       	movw	r24, r26
    24e8:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsi3>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	07 2e       	mov	r0, r23
    24f2:	7a e0       	ldi	r23, 0x0A	; 10
    24f4:	b6 95       	lsr	r27
    24f6:	a7 95       	ror	r26
    24f8:	97 95       	ror	r25
    24fa:	87 95       	ror	r24
    24fc:	7a 95       	dec	r23
    24fe:	d1 f7       	brne	.-12     	; 0x24f4 <main+0x78>
    2500:	70 2d       	mov	r23, r0
    2502:	fe 01       	movw	r30, r28
    2504:	e7 5a       	subi	r30, 0xA7	; 167
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	91 83       	std	Z+1, r25	; 0x01
    250a:	80 83       	st	Z, r24
		Local_u16AnalougeValue2 = (u16)((Local_u16DigitalValue2 * 5000UL) / 1024);
    250c:	fe 01       	movw	r30, r28
    250e:	e3 5a       	subi	r30, 0xA3	; 163
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 81       	ld	r24, Z
    2514:	91 81       	ldd	r25, Z+1	; 0x01
    2516:	cc 01       	movw	r24, r24
    2518:	a0 e0       	ldi	r26, 0x00	; 0
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	28 e8       	ldi	r18, 0x88	; 136
    251e:	33 e1       	ldi	r19, 0x13	; 19
    2520:	40 e0       	ldi	r20, 0x00	; 0
    2522:	50 e0       	ldi	r21, 0x00	; 0
    2524:	bc 01       	movw	r22, r24
    2526:	cd 01       	movw	r24, r26
    2528:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsi3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	07 2e       	mov	r0, r23
    2532:	7a e0       	ldi	r23, 0x0A	; 10
    2534:	b6 95       	lsr	r27
    2536:	a7 95       	ror	r26
    2538:	97 95       	ror	r25
    253a:	87 95       	ror	r24
    253c:	7a 95       	dec	r23
    253e:	d1 f7       	brne	.-12     	; 0x2534 <main+0xb8>
    2540:	70 2d       	mov	r23, r0
    2542:	fe 01       	movw	r30, r28
    2544:	e9 5a       	subi	r30, 0xA9	; 169
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	91 83       	std	Z+1, r25	; 0x01
    254a:	80 83       	st	Z, r24
		Local_u16AnalougeValue3 = (u16)((Local_u16DigitalValue3 * 5000UL) / 1024);
    254c:	fe 01       	movw	r30, r28
    254e:	e1 5a       	subi	r30, 0xA1	; 161
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	80 81       	ld	r24, Z
    2554:	91 81       	ldd	r25, Z+1	; 0x01
    2556:	cc 01       	movw	r24, r24
    2558:	a0 e0       	ldi	r26, 0x00	; 0
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	28 e8       	ldi	r18, 0x88	; 136
    255e:	33 e1       	ldi	r19, 0x13	; 19
    2560:	40 e0       	ldi	r20, 0x00	; 0
    2562:	50 e0       	ldi	r21, 0x00	; 0
    2564:	bc 01       	movw	r22, r24
    2566:	cd 01       	movw	r24, r26
    2568:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <__mulsi3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	07 2e       	mov	r0, r23
    2572:	7a e0       	ldi	r23, 0x0A	; 10
    2574:	b6 95       	lsr	r27
    2576:	a7 95       	ror	r26
    2578:	97 95       	ror	r25
    257a:	87 95       	ror	r24
    257c:	7a 95       	dec	r23
    257e:	d1 f7       	brne	.-12     	; 0x2574 <main+0xf8>
    2580:	70 2d       	mov	r23, r0
    2582:	fe 01       	movw	r30, r28
    2584:	eb 5a       	subi	r30, 0xAB	; 171
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	91 83       	std	Z+1, r25	; 0x01
    258a:	80 83       	st	Z, r24
//		LCD_voidSendNumber(Local_u16AnalougeValue2);
//		_delay_ms(300);
//		LCD_voidSendCommand(0b00000001);
//		_delay_ms(2);

				if((Local_u16AnalougeValue1>=3900 && Local_u16AnalougeValue1<= 4100) && (Local_u16AnalougeValue2>=4000 && Local_u16AnalougeValue2<= 4200) && (Local_u16AnalougeValue3>=4250 && Local_u16AnalougeValue3<= 4350))
    258c:	fe 01       	movw	r30, r28
    258e:	e7 5a       	subi	r30, 0xA7	; 167
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	2f e0       	ldi	r18, 0x0F	; 15
    2598:	8c 33       	cpi	r24, 0x3C	; 60
    259a:	92 07       	cpc	r25, r18
    259c:	08 f4       	brcc	.+2      	; 0x25a0 <main+0x124>
    259e:	f1 c0       	rjmp	.+482    	; 0x2782 <main+0x306>
    25a0:	fe 01       	movw	r30, r28
    25a2:	e7 5a       	subi	r30, 0xA7	; 167
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	e0 e1       	ldi	r30, 0x10	; 16
    25ac:	85 30       	cpi	r24, 0x05	; 5
    25ae:	9e 07       	cpc	r25, r30
    25b0:	08 f0       	brcs	.+2      	; 0x25b4 <main+0x138>
    25b2:	e7 c0       	rjmp	.+462    	; 0x2782 <main+0x306>
    25b4:	fe 01       	movw	r30, r28
    25b6:	e9 5a       	subi	r30, 0xA9	; 169
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	91 81       	ldd	r25, Z+1	; 0x01
    25be:	ff e0       	ldi	r31, 0x0F	; 15
    25c0:	80 3a       	cpi	r24, 0xA0	; 160
    25c2:	9f 07       	cpc	r25, r31
    25c4:	08 f4       	brcc	.+2      	; 0x25c8 <main+0x14c>
    25c6:	dd c0       	rjmp	.+442    	; 0x2782 <main+0x306>
    25c8:	fe 01       	movw	r30, r28
    25ca:	e9 5a       	subi	r30, 0xA9	; 169
    25cc:	ff 4f       	sbci	r31, 0xFF	; 255
    25ce:	80 81       	ld	r24, Z
    25d0:	91 81       	ldd	r25, Z+1	; 0x01
    25d2:	20 e1       	ldi	r18, 0x10	; 16
    25d4:	89 36       	cpi	r24, 0x69	; 105
    25d6:	92 07       	cpc	r25, r18
    25d8:	08 f0       	brcs	.+2      	; 0x25dc <main+0x160>
    25da:	d3 c0       	rjmp	.+422    	; 0x2782 <main+0x306>
    25dc:	fe 01       	movw	r30, r28
    25de:	eb 5a       	subi	r30, 0xAB	; 171
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	80 81       	ld	r24, Z
    25e4:	91 81       	ldd	r25, Z+1	; 0x01
    25e6:	e0 e1       	ldi	r30, 0x10	; 16
    25e8:	8a 39       	cpi	r24, 0x9A	; 154
    25ea:	9e 07       	cpc	r25, r30
    25ec:	08 f4       	brcc	.+2      	; 0x25f0 <main+0x174>
    25ee:	c9 c0       	rjmp	.+402    	; 0x2782 <main+0x306>
    25f0:	fe 01       	movw	r30, r28
    25f2:	eb 5a       	subi	r30, 0xAB	; 171
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	80 81       	ld	r24, Z
    25f8:	91 81       	ldd	r25, Z+1	; 0x01
    25fa:	f0 e1       	ldi	r31, 0x10	; 16
    25fc:	8f 3f       	cpi	r24, 0xFF	; 255
    25fe:	9f 07       	cpc	r25, r31
    2600:	08 f0       	brcs	.+2      	; 0x2604 <main+0x188>
    2602:	bf c0       	rjmp	.+382    	; 0x2782 <main+0x306>
				{
					LCD_voidSendCommand(0b00000001);
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    260a:	fe 01       	movw	r30, r28
    260c:	ef 5a       	subi	r30, 0xAF	; 175
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	a0 e0       	ldi	r26, 0x00	; 0
    2616:	b0 e4       	ldi	r27, 0x40	; 64
    2618:	80 83       	st	Z, r24
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	a2 83       	std	Z+2, r26	; 0x02
    261e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2620:	8e 01       	movw	r16, r28
    2622:	03 5b       	subi	r16, 0xB3	; 179
    2624:	1f 4f       	sbci	r17, 0xFF	; 255
    2626:	fe 01       	movw	r30, r28
    2628:	ef 5a       	subi	r30, 0xAF	; 175
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	60 81       	ld	r22, Z
    262e:	71 81       	ldd	r23, Z+1	; 0x01
    2630:	82 81       	ldd	r24, Z+2	; 0x02
    2632:	93 81       	ldd	r25, Z+3	; 0x03
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	4a ef       	ldi	r20, 0xFA	; 250
    263a:	54 e4       	ldi	r21, 0x44	; 68
    263c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	f8 01       	movw	r30, r16
    2646:	80 83       	st	Z, r24
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	a2 83       	std	Z+2, r26	; 0x02
    264c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    264e:	fe 01       	movw	r30, r28
    2650:	e3 5b       	subi	r30, 0xB3	; 179
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	60 81       	ld	r22, Z
    2656:	71 81       	ldd	r23, Z+1	; 0x01
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	93 81       	ldd	r25, Z+3	; 0x03
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e8       	ldi	r20, 0x80	; 128
    2662:	5f e3       	ldi	r21, 0x3F	; 63
    2664:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2668:	88 23       	and	r24, r24
    266a:	44 f4       	brge	.+16     	; 0x267c <main+0x200>
		__ticks = 1;
    266c:	fe 01       	movw	r30, r28
    266e:	e5 5b       	subi	r30, 0xB5	; 181
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	91 83       	std	Z+1, r25	; 0x01
    2678:	80 83       	st	Z, r24
    267a:	64 c0       	rjmp	.+200    	; 0x2744 <main+0x2c8>
	else if (__tmp > 65535)
    267c:	fe 01       	movw	r30, r28
    267e:	e3 5b       	subi	r30, 0xB3	; 179
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	60 81       	ld	r22, Z
    2684:	71 81       	ldd	r23, Z+1	; 0x01
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	93 81       	ldd	r25, Z+3	; 0x03
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	3f ef       	ldi	r19, 0xFF	; 255
    268e:	4f e7       	ldi	r20, 0x7F	; 127
    2690:	57 e4       	ldi	r21, 0x47	; 71
    2692:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2696:	18 16       	cp	r1, r24
    2698:	0c f0       	brlt	.+2      	; 0x269c <main+0x220>
    269a:	43 c0       	rjmp	.+134    	; 0x2722 <main+0x2a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269c:	fe 01       	movw	r30, r28
    269e:	ef 5a       	subi	r30, 0xAF	; 175
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	60 81       	ld	r22, Z
    26a4:	71 81       	ldd	r23, Z+1	; 0x01
    26a6:	82 81       	ldd	r24, Z+2	; 0x02
    26a8:	93 81       	ldd	r25, Z+3	; 0x03
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e2       	ldi	r20, 0x20	; 32
    26b0:	51 e4       	ldi	r21, 0x41	; 65
    26b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	8e 01       	movw	r16, r28
    26bc:	05 5b       	subi	r16, 0xB5	; 181
    26be:	1f 4f       	sbci	r17, 0xFF	; 255
    26c0:	bc 01       	movw	r22, r24
    26c2:	cd 01       	movw	r24, r26
    26c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	f8 01       	movw	r30, r16
    26ce:	91 83       	std	Z+1, r25	; 0x01
    26d0:	80 83       	st	Z, r24
    26d2:	1f c0       	rjmp	.+62     	; 0x2712 <main+0x296>
    26d4:	fe 01       	movw	r30, r28
    26d6:	e7 5b       	subi	r30, 0xB7	; 183
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	88 ec       	ldi	r24, 0xC8	; 200
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26e2:	fe 01       	movw	r30, r28
    26e4:	e7 5b       	subi	r30, 0xB7	; 183
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	80 81       	ld	r24, Z
    26ea:	91 81       	ldd	r25, Z+1	; 0x01
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <main+0x270>
    26f0:	fe 01       	movw	r30, r28
    26f2:	e7 5b       	subi	r30, 0xB7	; 183
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	91 83       	std	Z+1, r25	; 0x01
    26f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fa:	de 01       	movw	r26, r28
    26fc:	a5 5b       	subi	r26, 0xB5	; 181
    26fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2700:	fe 01       	movw	r30, r28
    2702:	e5 5b       	subi	r30, 0xB5	; 181
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	80 81       	ld	r24, Z
    2708:	91 81       	ldd	r25, Z+1	; 0x01
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	11 96       	adiw	r26, 0x01	; 1
    270e:	9c 93       	st	X, r25
    2710:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2712:	fe 01       	movw	r30, r28
    2714:	e5 5b       	subi	r30, 0xB5	; 181
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 81       	ld	r24, Z
    271a:	91 81       	ldd	r25, Z+1	; 0x01
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	d1 f6       	brne	.-76     	; 0x26d4 <main+0x258>
    2720:	27 c0       	rjmp	.+78     	; 0x2770 <main+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2722:	8e 01       	movw	r16, r28
    2724:	05 5b       	subi	r16, 0xB5	; 181
    2726:	1f 4f       	sbci	r17, 0xFF	; 255
    2728:	fe 01       	movw	r30, r28
    272a:	e3 5b       	subi	r30, 0xB3	; 179
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	60 81       	ld	r22, Z
    2730:	71 81       	ldd	r23, Z+1	; 0x01
    2732:	82 81       	ldd	r24, Z+2	; 0x02
    2734:	93 81       	ldd	r25, Z+3	; 0x03
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	f8 01       	movw	r30, r16
    2740:	91 83       	std	Z+1, r25	; 0x01
    2742:	80 83       	st	Z, r24
    2744:	de 01       	movw	r26, r28
    2746:	a9 5b       	subi	r26, 0xB9	; 185
    2748:	bf 4f       	sbci	r27, 0xFF	; 255
    274a:	fe 01       	movw	r30, r28
    274c:	e5 5b       	subi	r30, 0xB5	; 181
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	80 81       	ld	r24, Z
    2752:	91 81       	ldd	r25, Z+1	; 0x01
    2754:	8d 93       	st	X+, r24
    2756:	9c 93       	st	X, r25
    2758:	fe 01       	movw	r30, r28
    275a:	e9 5b       	subi	r30, 0xB9	; 185
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 81       	ld	r24, Z
    2760:	91 81       	ldd	r25, Z+1	; 0x01
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <main+0x2e6>
    2766:	fe 01       	movw	r30, r28
    2768:	e9 5b       	subi	r30, 0xB9	; 185
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	91 83       	std	Z+1, r25	; 0x01
    276e:	80 83       	st	Z, r24
					_delay_ms(2);
					LCD_u8GoToXY(LCD_u8_LINE1,FIRST_CHARACTER_LOCATION);
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_u8GoToXY>
					LCD_voidSendString("Perfect!");
    2778:	80 e6       	ldi	r24, 0x60	; 96
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidSendString>
    2780:	fa c2       	rjmp	.+1524   	; 0x2d76 <main+0x8fa>
				}
				else if((Local_u16AnalougeValue1>=3550 && Local_u16AnalougeValue1<= 3750) && (Local_u16AnalougeValue2>=3900 && Local_u16AnalougeValue2<= 4200) && (Local_u16AnalougeValue3>=4450 && Local_u16AnalougeValue3<= 4600))
    2782:	fe 01       	movw	r30, r28
    2784:	e7 5a       	subi	r30, 0xA7	; 167
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	80 81       	ld	r24, Z
    278a:	91 81       	ldd	r25, Z+1	; 0x01
    278c:	fd e0       	ldi	r31, 0x0D	; 13
    278e:	8e 3d       	cpi	r24, 0xDE	; 222
    2790:	9f 07       	cpc	r25, r31
    2792:	08 f4       	brcc	.+2      	; 0x2796 <main+0x31a>
    2794:	c3 c0       	rjmp	.+390    	; 0x291c <main+0x4a0>
    2796:	fe 01       	movw	r30, r28
    2798:	e7 5a       	subi	r30, 0xA7	; 167
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	80 81       	ld	r24, Z
    279e:	91 81       	ldd	r25, Z+1	; 0x01
    27a0:	2e e0       	ldi	r18, 0x0E	; 14
    27a2:	87 3a       	cpi	r24, 0xA7	; 167
    27a4:	92 07       	cpc	r25, r18
    27a6:	08 f0       	brcs	.+2      	; 0x27aa <main+0x32e>
    27a8:	b9 c0       	rjmp	.+370    	; 0x291c <main+0x4a0>
    27aa:	fe 01       	movw	r30, r28
    27ac:	e9 5a       	subi	r30, 0xA9	; 169
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 81       	ld	r24, Z
    27b2:	91 81       	ldd	r25, Z+1	; 0x01
    27b4:	ef e0       	ldi	r30, 0x0F	; 15
    27b6:	8c 33       	cpi	r24, 0x3C	; 60
    27b8:	9e 07       	cpc	r25, r30
    27ba:	08 f4       	brcc	.+2      	; 0x27be <main+0x342>
    27bc:	af c0       	rjmp	.+350    	; 0x291c <main+0x4a0>
    27be:	fe 01       	movw	r30, r28
    27c0:	e9 5a       	subi	r30, 0xA9	; 169
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	80 81       	ld	r24, Z
    27c6:	91 81       	ldd	r25, Z+1	; 0x01
    27c8:	f0 e1       	ldi	r31, 0x10	; 16
    27ca:	89 36       	cpi	r24, 0x69	; 105
    27cc:	9f 07       	cpc	r25, r31
    27ce:	08 f0       	brcs	.+2      	; 0x27d2 <main+0x356>
    27d0:	a5 c0       	rjmp	.+330    	; 0x291c <main+0x4a0>
    27d2:	fe 01       	movw	r30, r28
    27d4:	eb 5a       	subi	r30, 0xAB	; 171
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	80 81       	ld	r24, Z
    27da:	91 81       	ldd	r25, Z+1	; 0x01
    27dc:	21 e1       	ldi	r18, 0x11	; 17
    27de:	82 36       	cpi	r24, 0x62	; 98
    27e0:	92 07       	cpc	r25, r18
    27e2:	08 f4       	brcc	.+2      	; 0x27e6 <main+0x36a>
    27e4:	9b c0       	rjmp	.+310    	; 0x291c <main+0x4a0>
    27e6:	fe 01       	movw	r30, r28
    27e8:	eb 5a       	subi	r30, 0xAB	; 171
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 81       	ld	r24, Z
    27ee:	91 81       	ldd	r25, Z+1	; 0x01
    27f0:	e1 e1       	ldi	r30, 0x11	; 17
    27f2:	89 3f       	cpi	r24, 0xF9	; 249
    27f4:	9e 07       	cpc	r25, r30
    27f6:	08 f0       	brcs	.+2      	; 0x27fa <main+0x37e>
    27f8:	91 c0       	rjmp	.+290    	; 0x291c <main+0x4a0>
				{
					LCD_voidSendCommand(0b00000001);
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    2800:	fe 01       	movw	r30, r28
    2802:	ed 5b       	subi	r30, 0xBD	; 189
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	a0 e0       	ldi	r26, 0x00	; 0
    280c:	b0 e4       	ldi	r27, 0x40	; 64
    280e:	80 83       	st	Z, r24
    2810:	91 83       	std	Z+1, r25	; 0x01
    2812:	a2 83       	std	Z+2, r26	; 0x02
    2814:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2816:	8e 01       	movw	r16, r28
    2818:	01 5c       	subi	r16, 0xC1	; 193
    281a:	1f 4f       	sbci	r17, 0xFF	; 255
    281c:	fe 01       	movw	r30, r28
    281e:	ed 5b       	subi	r30, 0xBD	; 189
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	60 81       	ld	r22, Z
    2824:	71 81       	ldd	r23, Z+1	; 0x01
    2826:	82 81       	ldd	r24, Z+2	; 0x02
    2828:	93 81       	ldd	r25, Z+3	; 0x03
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	4a ef       	ldi	r20, 0xFA	; 250
    2830:	54 e4       	ldi	r21, 0x44	; 68
    2832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	f8 01       	movw	r30, r16
    283c:	80 83       	st	Z, r24
    283e:	91 83       	std	Z+1, r25	; 0x01
    2840:	a2 83       	std	Z+2, r26	; 0x02
    2842:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2844:	fe 01       	movw	r30, r28
    2846:	ff 96       	adiw	r30, 0x3f	; 63
    2848:	60 81       	ld	r22, Z
    284a:	71 81       	ldd	r23, Z+1	; 0x01
    284c:	82 81       	ldd	r24, Z+2	; 0x02
    284e:	93 81       	ldd	r25, Z+3	; 0x03
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e8       	ldi	r20, 0x80	; 128
    2856:	5f e3       	ldi	r21, 0x3F	; 63
    2858:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    285c:	88 23       	and	r24, r24
    285e:	2c f4       	brge	.+10     	; 0x286a <main+0x3ee>
		__ticks = 1;
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	9e af       	std	Y+62, r25	; 0x3e
    2866:	8d af       	std	Y+61, r24	; 0x3d
    2868:	46 c0       	rjmp	.+140    	; 0x28f6 <main+0x47a>
	else if (__tmp > 65535)
    286a:	fe 01       	movw	r30, r28
    286c:	ff 96       	adiw	r30, 0x3f	; 63
    286e:	60 81       	ld	r22, Z
    2870:	71 81       	ldd	r23, Z+1	; 0x01
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	93 81       	ldd	r25, Z+3	; 0x03
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	3f ef       	ldi	r19, 0xFF	; 255
    287a:	4f e7       	ldi	r20, 0x7F	; 127
    287c:	57 e4       	ldi	r21, 0x47	; 71
    287e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2882:	18 16       	cp	r1, r24
    2884:	64 f5       	brge	.+88     	; 0x28de <main+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2886:	fe 01       	movw	r30, r28
    2888:	ed 5b       	subi	r30, 0xBD	; 189
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	60 81       	ld	r22, Z
    288e:	71 81       	ldd	r23, Z+1	; 0x01
    2890:	82 81       	ldd	r24, Z+2	; 0x02
    2892:	93 81       	ldd	r25, Z+3	; 0x03
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	40 e2       	ldi	r20, 0x20	; 32
    289a:	51 e4       	ldi	r21, 0x41	; 65
    289c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9e af       	std	Y+62, r25	; 0x3e
    28b2:	8d af       	std	Y+61, r24	; 0x3d
    28b4:	0f c0       	rjmp	.+30     	; 0x28d4 <main+0x458>
    28b6:	88 ec       	ldi	r24, 0xC8	; 200
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	9c af       	std	Y+60, r25	; 0x3c
    28bc:	8b af       	std	Y+59, r24	; 0x3b
    28be:	8b ad       	ldd	r24, Y+59	; 0x3b
    28c0:	9c ad       	ldd	r25, Y+60	; 0x3c
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <main+0x446>
    28c6:	9c af       	std	Y+60, r25	; 0x3c
    28c8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    28cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	9e af       	std	Y+62, r25	; 0x3e
    28d2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    28d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	69 f7       	brne	.-38     	; 0x28b6 <main+0x43a>
    28dc:	16 c0       	rjmp	.+44     	; 0x290a <main+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28de:	fe 01       	movw	r30, r28
    28e0:	ff 96       	adiw	r30, 0x3f	; 63
    28e2:	60 81       	ld	r22, Z
    28e4:	71 81       	ldd	r23, Z+1	; 0x01
    28e6:	82 81       	ldd	r24, Z+2	; 0x02
    28e8:	93 81       	ldd	r25, Z+3	; 0x03
    28ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	9e af       	std	Y+62, r25	; 0x3e
    28f4:	8d af       	std	Y+61, r24	; 0x3d
    28f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    28f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    28fa:	9a af       	std	Y+58, r25	; 0x3a
    28fc:	89 af       	std	Y+57, r24	; 0x39
    28fe:	89 ad       	ldd	r24, Y+57	; 0x39
    2900:	9a ad       	ldd	r25, Y+58	; 0x3a
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	f1 f7       	brne	.-4      	; 0x2902 <main+0x486>
    2906:	9a af       	std	Y+58, r25	; 0x3a
    2908:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(2);
					LCD_u8GoToXY(LCD_u8_LINE1,FIRST_CHARACTER_LOCATION);
    290a:	81 e0       	ldi	r24, 0x01	; 1
    290c:	60 e0       	ldi	r22, 0x00	; 0
    290e:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_u8GoToXY>
					LCD_voidSendString("Good!");
    2912:	89 e6       	ldi	r24, 0x69	; 105
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidSendString>
    291a:	2d c2       	rjmp	.+1114   	; 0x2d76 <main+0x8fa>
				}
				else if((Local_u16AnalougeValue1>=3850 && Local_u16AnalougeValue1<= 4000) && (Local_u16AnalougeValue2>=3900 && Local_u16AnalougeValue2<= 4300) && (Local_u16AnalougeValue3>=4450 && Local_u16AnalougeValue3<= 4600))
    291c:	fe 01       	movw	r30, r28
    291e:	e7 5a       	subi	r30, 0xA7	; 167
    2920:	ff 4f       	sbci	r31, 0xFF	; 255
    2922:	80 81       	ld	r24, Z
    2924:	91 81       	ldd	r25, Z+1	; 0x01
    2926:	ff e0       	ldi	r31, 0x0F	; 15
    2928:	8a 30       	cpi	r24, 0x0A	; 10
    292a:	9f 07       	cpc	r25, r31
    292c:	08 f4       	brcc	.+2      	; 0x2930 <main+0x4b4>
    292e:	b0 c0       	rjmp	.+352    	; 0x2a90 <main+0x614>
    2930:	fe 01       	movw	r30, r28
    2932:	e7 5a       	subi	r30, 0xA7	; 167
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	80 81       	ld	r24, Z
    2938:	91 81       	ldd	r25, Z+1	; 0x01
    293a:	2f e0       	ldi	r18, 0x0F	; 15
    293c:	81 3a       	cpi	r24, 0xA1	; 161
    293e:	92 07       	cpc	r25, r18
    2940:	08 f0       	brcs	.+2      	; 0x2944 <main+0x4c8>
    2942:	a6 c0       	rjmp	.+332    	; 0x2a90 <main+0x614>
    2944:	fe 01       	movw	r30, r28
    2946:	e9 5a       	subi	r30, 0xA9	; 169
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 81       	ld	r24, Z
    294c:	91 81       	ldd	r25, Z+1	; 0x01
    294e:	ef e0       	ldi	r30, 0x0F	; 15
    2950:	8c 33       	cpi	r24, 0x3C	; 60
    2952:	9e 07       	cpc	r25, r30
    2954:	08 f4       	brcc	.+2      	; 0x2958 <main+0x4dc>
    2956:	9c c0       	rjmp	.+312    	; 0x2a90 <main+0x614>
    2958:	fe 01       	movw	r30, r28
    295a:	e9 5a       	subi	r30, 0xA9	; 169
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	80 81       	ld	r24, Z
    2960:	91 81       	ldd	r25, Z+1	; 0x01
    2962:	f0 e1       	ldi	r31, 0x10	; 16
    2964:	8d 3c       	cpi	r24, 0xCD	; 205
    2966:	9f 07       	cpc	r25, r31
    2968:	08 f0       	brcs	.+2      	; 0x296c <main+0x4f0>
    296a:	92 c0       	rjmp	.+292    	; 0x2a90 <main+0x614>
    296c:	fe 01       	movw	r30, r28
    296e:	eb 5a       	subi	r30, 0xAB	; 171
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	80 81       	ld	r24, Z
    2974:	91 81       	ldd	r25, Z+1	; 0x01
    2976:	21 e1       	ldi	r18, 0x11	; 17
    2978:	82 36       	cpi	r24, 0x62	; 98
    297a:	92 07       	cpc	r25, r18
    297c:	08 f4       	brcc	.+2      	; 0x2980 <main+0x504>
    297e:	88 c0       	rjmp	.+272    	; 0x2a90 <main+0x614>
    2980:	fe 01       	movw	r30, r28
    2982:	eb 5a       	subi	r30, 0xAB	; 171
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	80 81       	ld	r24, Z
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	e1 e1       	ldi	r30, 0x11	; 17
    298c:	89 3f       	cpi	r24, 0xF9	; 249
    298e:	9e 07       	cpc	r25, r30
    2990:	08 f0       	brcs	.+2      	; 0x2994 <main+0x518>
    2992:	7e c0       	rjmp	.+252    	; 0x2a90 <main+0x614>
				{
					LCD_voidSendCommand(0b00000001);
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a0 e0       	ldi	r26, 0x00	; 0
    29a0:	b0 e4       	ldi	r27, 0x40	; 64
    29a2:	8d ab       	std	Y+53, r24	; 0x35
    29a4:	9e ab       	std	Y+54, r25	; 0x36
    29a6:	af ab       	std	Y+55, r26	; 0x37
    29a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29aa:	6d a9       	ldd	r22, Y+53	; 0x35
    29ac:	7e a9       	ldd	r23, Y+54	; 0x36
    29ae:	8f a9       	ldd	r24, Y+55	; 0x37
    29b0:	98 ad       	ldd	r25, Y+56	; 0x38
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	4a ef       	ldi	r20, 0xFA	; 250
    29b8:	54 e4       	ldi	r21, 0x44	; 68
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	89 ab       	std	Y+49, r24	; 0x31
    29c4:	9a ab       	std	Y+50, r25	; 0x32
    29c6:	ab ab       	std	Y+51, r26	; 0x33
    29c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29ca:	69 a9       	ldd	r22, Y+49	; 0x31
    29cc:	7a a9       	ldd	r23, Y+50	; 0x32
    29ce:	8b a9       	ldd	r24, Y+51	; 0x33
    29d0:	9c a9       	ldd	r25, Y+52	; 0x34
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e8       	ldi	r20, 0x80	; 128
    29d8:	5f e3       	ldi	r21, 0x3F	; 63
    29da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29de:	88 23       	and	r24, r24
    29e0:	2c f4       	brge	.+10     	; 0x29ec <main+0x570>
		__ticks = 1;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	98 ab       	std	Y+48, r25	; 0x30
    29e8:	8f a7       	std	Y+47, r24	; 0x2f
    29ea:	3f c0       	rjmp	.+126    	; 0x2a6a <main+0x5ee>
	else if (__tmp > 65535)
    29ec:	69 a9       	ldd	r22, Y+49	; 0x31
    29ee:	7a a9       	ldd	r23, Y+50	; 0x32
    29f0:	8b a9       	ldd	r24, Y+51	; 0x33
    29f2:	9c a9       	ldd	r25, Y+52	; 0x34
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	3f ef       	ldi	r19, 0xFF	; 255
    29f8:	4f e7       	ldi	r20, 0x7F	; 127
    29fa:	57 e4       	ldi	r21, 0x47	; 71
    29fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a00:	18 16       	cp	r1, r24
    2a02:	4c f5       	brge	.+82     	; 0x2a56 <main+0x5da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a04:	6d a9       	ldd	r22, Y+53	; 0x35
    2a06:	7e a9       	ldd	r23, Y+54	; 0x36
    2a08:	8f a9       	ldd	r24, Y+55	; 0x37
    2a0a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e2       	ldi	r20, 0x20	; 32
    2a12:	51 e4       	ldi	r21, 0x41	; 65
    2a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	98 ab       	std	Y+48, r25	; 0x30
    2a2a:	8f a7       	std	Y+47, r24	; 0x2f
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <main+0x5d0>
    2a2e:	88 ec       	ldi	r24, 0xC8	; 200
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9e a7       	std	Y+46, r25	; 0x2e
    2a34:	8d a7       	std	Y+45, r24	; 0x2d
    2a36:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a38:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <main+0x5be>
    2a3e:	9e a7       	std	Y+46, r25	; 0x2e
    2a40:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a42:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a44:	98 a9       	ldd	r25, Y+48	; 0x30
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	98 ab       	std	Y+48, r25	; 0x30
    2a4a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a4e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	69 f7       	brne	.-38     	; 0x2a2e <main+0x5b2>
    2a54:	14 c0       	rjmp	.+40     	; 0x2a7e <main+0x602>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a56:	69 a9       	ldd	r22, Y+49	; 0x31
    2a58:	7a a9       	ldd	r23, Y+50	; 0x32
    2a5a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a5c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	98 ab       	std	Y+48, r25	; 0x30
    2a68:	8f a7       	std	Y+47, r24	; 0x2f
    2a6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a6c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a6e:	9c a7       	std	Y+44, r25	; 0x2c
    2a70:	8b a7       	std	Y+43, r24	; 0x2b
    2a72:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a74:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <main+0x5fa>
    2a7a:	9c a7       	std	Y+44, r25	; 0x2c
    2a7c:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(2);
					LCD_u8GoToXY(LCD_u8_LINE1,FIRST_CHARACTER_LOCATION);
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_u8GoToXY>
					LCD_voidSendString("Rock");
    2a86:	8f e6       	ldi	r24, 0x6F	; 111
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidSendString>
    2a8e:	73 c1       	rjmp	.+742    	; 0x2d76 <main+0x8fa>
				}
				else if((Local_u16AnalougeValue1>=3800 && Local_u16AnalougeValue1<= 3900) && (Local_u16AnalougeValue2>=3700 && Local_u16AnalougeValue2<= 3800) && (Local_u16AnalougeValue3>=4250 && Local_u16AnalougeValue3<= 4350))
    2a90:	fe 01       	movw	r30, r28
    2a92:	e7 5a       	subi	r30, 0xA7	; 167
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	80 81       	ld	r24, Z
    2a98:	91 81       	ldd	r25, Z+1	; 0x01
    2a9a:	fe e0       	ldi	r31, 0x0E	; 14
    2a9c:	88 3d       	cpi	r24, 0xD8	; 216
    2a9e:	9f 07       	cpc	r25, r31
    2aa0:	08 f4       	brcc	.+2      	; 0x2aa4 <main+0x628>
    2aa2:	b0 c0       	rjmp	.+352    	; 0x2c04 <main+0x788>
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e7 5a       	subi	r30, 0xA7	; 167
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	80 81       	ld	r24, Z
    2aac:	91 81       	ldd	r25, Z+1	; 0x01
    2aae:	2f e0       	ldi	r18, 0x0F	; 15
    2ab0:	8d 33       	cpi	r24, 0x3D	; 61
    2ab2:	92 07       	cpc	r25, r18
    2ab4:	08 f0       	brcs	.+2      	; 0x2ab8 <main+0x63c>
    2ab6:	a6 c0       	rjmp	.+332    	; 0x2c04 <main+0x788>
    2ab8:	fe 01       	movw	r30, r28
    2aba:	e9 5a       	subi	r30, 0xA9	; 169
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	80 81       	ld	r24, Z
    2ac0:	91 81       	ldd	r25, Z+1	; 0x01
    2ac2:	ee e0       	ldi	r30, 0x0E	; 14
    2ac4:	84 37       	cpi	r24, 0x74	; 116
    2ac6:	9e 07       	cpc	r25, r30
    2ac8:	08 f4       	brcc	.+2      	; 0x2acc <main+0x650>
    2aca:	9c c0       	rjmp	.+312    	; 0x2c04 <main+0x788>
    2acc:	fe 01       	movw	r30, r28
    2ace:	e9 5a       	subi	r30, 0xA9	; 169
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	80 81       	ld	r24, Z
    2ad4:	91 81       	ldd	r25, Z+1	; 0x01
    2ad6:	fe e0       	ldi	r31, 0x0E	; 14
    2ad8:	89 3d       	cpi	r24, 0xD9	; 217
    2ada:	9f 07       	cpc	r25, r31
    2adc:	08 f0       	brcs	.+2      	; 0x2ae0 <main+0x664>
    2ade:	92 c0       	rjmp	.+292    	; 0x2c04 <main+0x788>
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	eb 5a       	subi	r30, 0xAB	; 171
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 81       	ld	r24, Z
    2ae8:	91 81       	ldd	r25, Z+1	; 0x01
    2aea:	20 e1       	ldi	r18, 0x10	; 16
    2aec:	8a 39       	cpi	r24, 0x9A	; 154
    2aee:	92 07       	cpc	r25, r18
    2af0:	08 f4       	brcc	.+2      	; 0x2af4 <main+0x678>
    2af2:	88 c0       	rjmp	.+272    	; 0x2c04 <main+0x788>
    2af4:	fe 01       	movw	r30, r28
    2af6:	eb 5a       	subi	r30, 0xAB	; 171
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	80 81       	ld	r24, Z
    2afc:	91 81       	ldd	r25, Z+1	; 0x01
    2afe:	e0 e1       	ldi	r30, 0x10	; 16
    2b00:	8f 3f       	cpi	r24, 0xFF	; 255
    2b02:	9e 07       	cpc	r25, r30
    2b04:	08 f0       	brcs	.+2      	; 0x2b08 <main+0x68c>
    2b06:	7e c0       	rjmp	.+252    	; 0x2c04 <main+0x788>
				{
					LCD_voidSendCommand(0b00000001);
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	a0 e0       	ldi	r26, 0x00	; 0
    2b14:	b0 e4       	ldi	r27, 0x40	; 64
    2b16:	8f a3       	std	Y+39, r24	; 0x27
    2b18:	98 a7       	std	Y+40, r25	; 0x28
    2b1a:	a9 a7       	std	Y+41, r26	; 0x29
    2b1c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1e:	6f a1       	ldd	r22, Y+39	; 0x27
    2b20:	78 a5       	ldd	r23, Y+40	; 0x28
    2b22:	89 a5       	ldd	r24, Y+41	; 0x29
    2b24:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	4a ef       	ldi	r20, 0xFA	; 250
    2b2c:	54 e4       	ldi	r21, 0x44	; 68
    2b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	8b a3       	std	Y+35, r24	; 0x23
    2b38:	9c a3       	std	Y+36, r25	; 0x24
    2b3a:	ad a3       	std	Y+37, r26	; 0x25
    2b3c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b3e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b40:	7c a1       	ldd	r23, Y+36	; 0x24
    2b42:	8d a1       	ldd	r24, Y+37	; 0x25
    2b44:	9e a1       	ldd	r25, Y+38	; 0x26
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e8       	ldi	r20, 0x80	; 128
    2b4c:	5f e3       	ldi	r21, 0x3F	; 63
    2b4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b52:	88 23       	and	r24, r24
    2b54:	2c f4       	brge	.+10     	; 0x2b60 <main+0x6e4>
		__ticks = 1;
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	9a a3       	std	Y+34, r25	; 0x22
    2b5c:	89 a3       	std	Y+33, r24	; 0x21
    2b5e:	3f c0       	rjmp	.+126    	; 0x2bde <main+0x762>
	else if (__tmp > 65535)
    2b60:	6b a1       	ldd	r22, Y+35	; 0x23
    2b62:	7c a1       	ldd	r23, Y+36	; 0x24
    2b64:	8d a1       	ldd	r24, Y+37	; 0x25
    2b66:	9e a1       	ldd	r25, Y+38	; 0x26
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	3f ef       	ldi	r19, 0xFF	; 255
    2b6c:	4f e7       	ldi	r20, 0x7F	; 127
    2b6e:	57 e4       	ldi	r21, 0x47	; 71
    2b70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b74:	18 16       	cp	r1, r24
    2b76:	4c f5       	brge	.+82     	; 0x2bca <main+0x74e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b78:	6f a1       	ldd	r22, Y+39	; 0x27
    2b7a:	78 a5       	ldd	r23, Y+40	; 0x28
    2b7c:	89 a5       	ldd	r24, Y+41	; 0x29
    2b7e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e2       	ldi	r20, 0x20	; 32
    2b86:	51 e4       	ldi	r21, 0x41	; 65
    2b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	bc 01       	movw	r22, r24
    2b92:	cd 01       	movw	r24, r26
    2b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	9a a3       	std	Y+34, r25	; 0x22
    2b9e:	89 a3       	std	Y+33, r24	; 0x21
    2ba0:	0f c0       	rjmp	.+30     	; 0x2bc0 <main+0x744>
    2ba2:	88 ec       	ldi	r24, 0xC8	; 200
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	98 a3       	std	Y+32, r25	; 0x20
    2ba8:	8f 8f       	std	Y+31, r24	; 0x1f
    2baa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bac:	98 a1       	ldd	r25, Y+32	; 0x20
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <main+0x732>
    2bb2:	98 a3       	std	Y+32, r25	; 0x20
    2bb4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	9a a3       	std	Y+34, r25	; 0x22
    2bbe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc0:	89 a1       	ldd	r24, Y+33	; 0x21
    2bc2:	9a a1       	ldd	r25, Y+34	; 0x22
    2bc4:	00 97       	sbiw	r24, 0x00	; 0
    2bc6:	69 f7       	brne	.-38     	; 0x2ba2 <main+0x726>
    2bc8:	14 c0       	rjmp	.+40     	; 0x2bf2 <main+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bca:	6b a1       	ldd	r22, Y+35	; 0x23
    2bcc:	7c a1       	ldd	r23, Y+36	; 0x24
    2bce:	8d a1       	ldd	r24, Y+37	; 0x25
    2bd0:	9e a1       	ldd	r25, Y+38	; 0x26
    2bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	9a a3       	std	Y+34, r25	; 0x22
    2bdc:	89 a3       	std	Y+33, r24	; 0x21
    2bde:	89 a1       	ldd	r24, Y+33	; 0x21
    2be0:	9a a1       	ldd	r25, Y+34	; 0x22
    2be2:	9e 8f       	std	Y+30, r25	; 0x1e
    2be4:	8d 8f       	std	Y+29, r24	; 0x1d
    2be6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2be8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bea:	01 97       	sbiw	r24, 0x01	; 1
    2bec:	f1 f7       	brne	.-4      	; 0x2bea <main+0x76e>
    2bee:	9e 8f       	std	Y+30, r25	; 0x1e
    2bf0:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(2);
					LCD_u8GoToXY(LCD_u8_LINE1,FIRST_CHARACTER_LOCATION);
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_u8GoToXY>
					LCD_voidSendString("Scissor");
    2bfa:	84 e7       	ldi	r24, 0x74	; 116
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidSendString>
    2c02:	b9 c0       	rjmp	.+370    	; 0x2d76 <main+0x8fa>
				}
				else if((Local_u16AnalougeValue1>=3600 && Local_u16AnalougeValue1<= 3699) && (Local_u16AnalougeValue2>=3700 && Local_u16AnalougeValue2<= 3800) && (Local_u16AnalougeValue3>=4250 && Local_u16AnalougeValue3<= 4350))
    2c04:	fe 01       	movw	r30, r28
    2c06:	e7 5a       	subi	r30, 0xA7	; 167
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 81       	ld	r24, Z
    2c0c:	91 81       	ldd	r25, Z+1	; 0x01
    2c0e:	fe e0       	ldi	r31, 0x0E	; 14
    2c10:	80 31       	cpi	r24, 0x10	; 16
    2c12:	9f 07       	cpc	r25, r31
    2c14:	08 f4       	brcc	.+2      	; 0x2c18 <main+0x79c>
    2c16:	af c0       	rjmp	.+350    	; 0x2d76 <main+0x8fa>
    2c18:	fe 01       	movw	r30, r28
    2c1a:	e7 5a       	subi	r30, 0xA7	; 167
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	80 81       	ld	r24, Z
    2c20:	91 81       	ldd	r25, Z+1	; 0x01
    2c22:	2e e0       	ldi	r18, 0x0E	; 14
    2c24:	84 37       	cpi	r24, 0x74	; 116
    2c26:	92 07       	cpc	r25, r18
    2c28:	08 f0       	brcs	.+2      	; 0x2c2c <main+0x7b0>
    2c2a:	a5 c0       	rjmp	.+330    	; 0x2d76 <main+0x8fa>
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e9 5a       	subi	r30, 0xA9	; 169
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	80 81       	ld	r24, Z
    2c34:	91 81       	ldd	r25, Z+1	; 0x01
    2c36:	ee e0       	ldi	r30, 0x0E	; 14
    2c38:	84 37       	cpi	r24, 0x74	; 116
    2c3a:	9e 07       	cpc	r25, r30
    2c3c:	08 f4       	brcc	.+2      	; 0x2c40 <main+0x7c4>
    2c3e:	9b c0       	rjmp	.+310    	; 0x2d76 <main+0x8fa>
    2c40:	fe 01       	movw	r30, r28
    2c42:	e9 5a       	subi	r30, 0xA9	; 169
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	80 81       	ld	r24, Z
    2c48:	91 81       	ldd	r25, Z+1	; 0x01
    2c4a:	fe e0       	ldi	r31, 0x0E	; 14
    2c4c:	89 3d       	cpi	r24, 0xD9	; 217
    2c4e:	9f 07       	cpc	r25, r31
    2c50:	08 f0       	brcs	.+2      	; 0x2c54 <main+0x7d8>
    2c52:	91 c0       	rjmp	.+290    	; 0x2d76 <main+0x8fa>
    2c54:	fe 01       	movw	r30, r28
    2c56:	eb 5a       	subi	r30, 0xAB	; 171
    2c58:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5a:	80 81       	ld	r24, Z
    2c5c:	91 81       	ldd	r25, Z+1	; 0x01
    2c5e:	20 e1       	ldi	r18, 0x10	; 16
    2c60:	8a 39       	cpi	r24, 0x9A	; 154
    2c62:	92 07       	cpc	r25, r18
    2c64:	08 f4       	brcc	.+2      	; 0x2c68 <main+0x7ec>
    2c66:	87 c0       	rjmp	.+270    	; 0x2d76 <main+0x8fa>
    2c68:	fe 01       	movw	r30, r28
    2c6a:	eb 5a       	subi	r30, 0xAB	; 171
    2c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6e:	80 81       	ld	r24, Z
    2c70:	91 81       	ldd	r25, Z+1	; 0x01
    2c72:	e0 e1       	ldi	r30, 0x10	; 16
    2c74:	8f 3f       	cpi	r24, 0xFF	; 255
    2c76:	9e 07       	cpc	r25, r30
    2c78:	08 f0       	brcs	.+2      	; 0x2c7c <main+0x800>
    2c7a:	7d c0       	rjmp	.+250    	; 0x2d76 <main+0x8fa>
				{
					LCD_voidSendCommand(0b00000001);
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <LCD_voidSendCommand>
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	a0 e0       	ldi	r26, 0x00	; 0
    2c88:	b0 e4       	ldi	r27, 0x40	; 64
    2c8a:	89 8f       	std	Y+25, r24	; 0x19
    2c8c:	9a 8f       	std	Y+26, r25	; 0x1a
    2c8e:	ab 8f       	std	Y+27, r26	; 0x1b
    2c90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c92:	69 8d       	ldd	r22, Y+25	; 0x19
    2c94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	4a ef       	ldi	r20, 0xFA	; 250
    2ca0:	54 e4       	ldi	r21, 0x44	; 68
    2ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	8d 8b       	std	Y+21, r24	; 0x15
    2cac:	9e 8b       	std	Y+22, r25	; 0x16
    2cae:	af 8b       	std	Y+23, r26	; 0x17
    2cb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cb2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e8       	ldi	r20, 0x80	; 128
    2cc0:	5f e3       	ldi	r21, 0x3F	; 63
    2cc2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cc6:	88 23       	and	r24, r24
    2cc8:	2c f4       	brge	.+10     	; 0x2cd4 <main+0x858>
		__ticks = 1;
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	9c 8b       	std	Y+20, r25	; 0x14
    2cd0:	8b 8b       	std	Y+19, r24	; 0x13
    2cd2:	3f c0       	rjmp	.+126    	; 0x2d52 <main+0x8d6>
	else if (__tmp > 65535)
    2cd4:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd6:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cda:	98 8d       	ldd	r25, Y+24	; 0x18
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	3f ef       	ldi	r19, 0xFF	; 255
    2ce0:	4f e7       	ldi	r20, 0x7F	; 127
    2ce2:	57 e4       	ldi	r21, 0x47	; 71
    2ce4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ce8:	18 16       	cp	r1, r24
    2cea:	4c f5       	brge	.+82     	; 0x2d3e <main+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cec:	69 8d       	ldd	r22, Y+25	; 0x19
    2cee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	40 e2       	ldi	r20, 0x20	; 32
    2cfa:	51 e4       	ldi	r21, 0x41	; 65
    2cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	bc 01       	movw	r22, r24
    2d06:	cd 01       	movw	r24, r26
    2d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	9c 8b       	std	Y+20, r25	; 0x14
    2d12:	8b 8b       	std	Y+19, r24	; 0x13
    2d14:	0f c0       	rjmp	.+30     	; 0x2d34 <main+0x8b8>
    2d16:	88 ec       	ldi	r24, 0xC8	; 200
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	9a 8b       	std	Y+18, r25	; 0x12
    2d1c:	89 8b       	std	Y+17, r24	; 0x11
    2d1e:	89 89       	ldd	r24, Y+17	; 0x11
    2d20:	9a 89       	ldd	r25, Y+18	; 0x12
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	f1 f7       	brne	.-4      	; 0x2d22 <main+0x8a6>
    2d26:	9a 8b       	std	Y+18, r25	; 0x12
    2d28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	9c 8b       	std	Y+20, r25	; 0x14
    2d32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d34:	8b 89       	ldd	r24, Y+19	; 0x13
    2d36:	9c 89       	ldd	r25, Y+20	; 0x14
    2d38:	00 97       	sbiw	r24, 0x00	; 0
    2d3a:	69 f7       	brne	.-38     	; 0x2d16 <main+0x89a>
    2d3c:	14 c0       	rjmp	.+40     	; 0x2d66 <main+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d40:	7e 89       	ldd	r23, Y+22	; 0x16
    2d42:	8f 89       	ldd	r24, Y+23	; 0x17
    2d44:	98 8d       	ldd	r25, Y+24	; 0x18
    2d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	9c 8b       	std	Y+20, r25	; 0x14
    2d50:	8b 8b       	std	Y+19, r24	; 0x13
    2d52:	8b 89       	ldd	r24, Y+19	; 0x13
    2d54:	9c 89       	ldd	r25, Y+20	; 0x14
    2d56:	98 8b       	std	Y+16, r25	; 0x10
    2d58:	8f 87       	std	Y+15, r24	; 0x0f
    2d5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d5c:	98 89       	ldd	r25, Y+16	; 0x10
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	f1 f7       	brne	.-4      	; 0x2d5e <main+0x8e2>
    2d62:	98 8b       	std	Y+16, r25	; 0x10
    2d64:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(2);
					LCD_u8GoToXY(LCD_u8_LINE1,FIRST_CHARACTER_LOCATION);
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	60 e0       	ldi	r22, 0x00	; 0
    2d6a:	0e 94 74 11 	call	0x22e8	; 0x22e8 <LCD_u8GoToXY>
					LCD_voidSendString("Paper");
    2d6e:	8c e7       	ldi	r24, 0x7C	; 124
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	0e 94 e6 10 	call	0x21cc	; 0x21cc <LCD_voidSendString>
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	a8 ec       	ldi	r26, 0xC8	; 200
    2d7c:	b2 e4       	ldi	r27, 0x42	; 66
    2d7e:	8b 87       	std	Y+11, r24	; 0x0b
    2d80:	9c 87       	std	Y+12, r25	; 0x0c
    2d82:	ad 87       	std	Y+13, r26	; 0x0d
    2d84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8e:	20 e0       	ldi	r18, 0x00	; 0
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	4a ef       	ldi	r20, 0xFA	; 250
    2d94:	54 e4       	ldi	r21, 0x44	; 68
    2d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	8f 83       	std	Y+7, r24	; 0x07
    2da0:	98 87       	std	Y+8, r25	; 0x08
    2da2:	a9 87       	std	Y+9, r26	; 0x09
    2da4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2da6:	6f 81       	ldd	r22, Y+7	; 0x07
    2da8:	78 85       	ldd	r23, Y+8	; 0x08
    2daa:	89 85       	ldd	r24, Y+9	; 0x09
    2dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	40 e8       	ldi	r20, 0x80	; 128
    2db4:	5f e3       	ldi	r21, 0x3F	; 63
    2db6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dba:	88 23       	and	r24, r24
    2dbc:	2c f4       	brge	.+10     	; 0x2dc8 <main+0x94c>
		__ticks = 1;
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	9e 83       	std	Y+6, r25	; 0x06
    2dc4:	8d 83       	std	Y+5, r24	; 0x05
    2dc6:	3f c0       	rjmp	.+126    	; 0x2e46 <main+0x9ca>
	else if (__tmp > 65535)
    2dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dca:	78 85       	ldd	r23, Y+8	; 0x08
    2dcc:	89 85       	ldd	r24, Y+9	; 0x09
    2dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	3f ef       	ldi	r19, 0xFF	; 255
    2dd4:	4f e7       	ldi	r20, 0x7F	; 127
    2dd6:	57 e4       	ldi	r21, 0x47	; 71
    2dd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ddc:	18 16       	cp	r1, r24
    2dde:	4c f5       	brge	.+82     	; 0x2e32 <main+0x9b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2de2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2de4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2de6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	40 e2       	ldi	r20, 0x20	; 32
    2dee:	51 e4       	ldi	r21, 0x41	; 65
    2df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	bc 01       	movw	r22, r24
    2dfa:	cd 01       	movw	r24, r26
    2dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	9e 83       	std	Y+6, r25	; 0x06
    2e06:	8d 83       	std	Y+5, r24	; 0x05
    2e08:	0f c0       	rjmp	.+30     	; 0x2e28 <main+0x9ac>
    2e0a:	88 ec       	ldi	r24, 0xC8	; 200
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	9c 83       	std	Y+4, r25	; 0x04
    2e10:	8b 83       	std	Y+3, r24	; 0x03
    2e12:	8b 81       	ldd	r24, Y+3	; 0x03
    2e14:	9c 81       	ldd	r25, Y+4	; 0x04
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	f1 f7       	brne	.-4      	; 0x2e16 <main+0x99a>
    2e1a:	9c 83       	std	Y+4, r25	; 0x04
    2e1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e20:	9e 81       	ldd	r25, Y+6	; 0x06
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	9e 83       	std	Y+6, r25	; 0x06
    2e26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e28:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2c:	00 97       	sbiw	r24, 0x00	; 0
    2e2e:	69 f7       	brne	.-38     	; 0x2e0a <main+0x98e>
    2e30:	38 cb       	rjmp	.-2448   	; 0x24a2 <main+0x26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e32:	6f 81       	ldd	r22, Y+7	; 0x07
    2e34:	78 85       	ldd	r23, Y+8	; 0x08
    2e36:	89 85       	ldd	r24, Y+9	; 0x09
    2e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	9e 83       	std	Y+6, r25	; 0x06
    2e44:	8d 83       	std	Y+5, r24	; 0x05
    2e46:	8d 81       	ldd	r24, Y+5	; 0x05
    2e48:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4a:	9a 83       	std	Y+2, r25	; 0x02
    2e4c:	89 83       	std	Y+1, r24	; 0x01
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	9a 81       	ldd	r25, Y+2	; 0x02
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	f1 f7       	brne	.-4      	; 0x2e52 <main+0x9d6>
    2e56:	9a 83       	std	Y+2, r25	; 0x02
    2e58:	89 83       	std	Y+1, r24	; 0x01
    2e5a:	23 cb       	rjmp	.-2490   	; 0x24a2 <main+0x26>

00002e5c <__mulsi3>:
    2e5c:	62 9f       	mul	r22, r18
    2e5e:	d0 01       	movw	r26, r0
    2e60:	73 9f       	mul	r23, r19
    2e62:	f0 01       	movw	r30, r0
    2e64:	82 9f       	mul	r24, r18
    2e66:	e0 0d       	add	r30, r0
    2e68:	f1 1d       	adc	r31, r1
    2e6a:	64 9f       	mul	r22, r20
    2e6c:	e0 0d       	add	r30, r0
    2e6e:	f1 1d       	adc	r31, r1
    2e70:	92 9f       	mul	r25, r18
    2e72:	f0 0d       	add	r31, r0
    2e74:	83 9f       	mul	r24, r19
    2e76:	f0 0d       	add	r31, r0
    2e78:	74 9f       	mul	r23, r20
    2e7a:	f0 0d       	add	r31, r0
    2e7c:	65 9f       	mul	r22, r21
    2e7e:	f0 0d       	add	r31, r0
    2e80:	99 27       	eor	r25, r25
    2e82:	72 9f       	mul	r23, r18
    2e84:	b0 0d       	add	r27, r0
    2e86:	e1 1d       	adc	r30, r1
    2e88:	f9 1f       	adc	r31, r25
    2e8a:	63 9f       	mul	r22, r19
    2e8c:	b0 0d       	add	r27, r0
    2e8e:	e1 1d       	adc	r30, r1
    2e90:	f9 1f       	adc	r31, r25
    2e92:	bd 01       	movw	r22, r26
    2e94:	cf 01       	movw	r24, r30
    2e96:	11 24       	eor	r1, r1
    2e98:	08 95       	ret

00002e9a <__udivmodhi4>:
    2e9a:	aa 1b       	sub	r26, r26
    2e9c:	bb 1b       	sub	r27, r27
    2e9e:	51 e1       	ldi	r21, 0x11	; 17
    2ea0:	07 c0       	rjmp	.+14     	; 0x2eb0 <__udivmodhi4_ep>

00002ea2 <__udivmodhi4_loop>:
    2ea2:	aa 1f       	adc	r26, r26
    2ea4:	bb 1f       	adc	r27, r27
    2ea6:	a6 17       	cp	r26, r22
    2ea8:	b7 07       	cpc	r27, r23
    2eaa:	10 f0       	brcs	.+4      	; 0x2eb0 <__udivmodhi4_ep>
    2eac:	a6 1b       	sub	r26, r22
    2eae:	b7 0b       	sbc	r27, r23

00002eb0 <__udivmodhi4_ep>:
    2eb0:	88 1f       	adc	r24, r24
    2eb2:	99 1f       	adc	r25, r25
    2eb4:	5a 95       	dec	r21
    2eb6:	a9 f7       	brne	.-22     	; 0x2ea2 <__udivmodhi4_loop>
    2eb8:	80 95       	com	r24
    2eba:	90 95       	com	r25
    2ebc:	bc 01       	movw	r22, r24
    2ebe:	cd 01       	movw	r24, r26
    2ec0:	08 95       	ret

00002ec2 <__prologue_saves__>:
    2ec2:	2f 92       	push	r2
    2ec4:	3f 92       	push	r3
    2ec6:	4f 92       	push	r4
    2ec8:	5f 92       	push	r5
    2eca:	6f 92       	push	r6
    2ecc:	7f 92       	push	r7
    2ece:	8f 92       	push	r8
    2ed0:	9f 92       	push	r9
    2ed2:	af 92       	push	r10
    2ed4:	bf 92       	push	r11
    2ed6:	cf 92       	push	r12
    2ed8:	df 92       	push	r13
    2eda:	ef 92       	push	r14
    2edc:	ff 92       	push	r15
    2ede:	0f 93       	push	r16
    2ee0:	1f 93       	push	r17
    2ee2:	cf 93       	push	r28
    2ee4:	df 93       	push	r29
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	ca 1b       	sub	r28, r26
    2eec:	db 0b       	sbc	r29, r27
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	09 94       	ijmp

00002efa <__epilogue_restores__>:
    2efa:	2a 88       	ldd	r2, Y+18	; 0x12
    2efc:	39 88       	ldd	r3, Y+17	; 0x11
    2efe:	48 88       	ldd	r4, Y+16	; 0x10
    2f00:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f02:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f04:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f06:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f08:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f0c:	b9 84       	ldd	r11, Y+9	; 0x09
    2f0e:	c8 84       	ldd	r12, Y+8	; 0x08
    2f10:	df 80       	ldd	r13, Y+7	; 0x07
    2f12:	ee 80       	ldd	r14, Y+6	; 0x06
    2f14:	fd 80       	ldd	r15, Y+5	; 0x05
    2f16:	0c 81       	ldd	r16, Y+4	; 0x04
    2f18:	1b 81       	ldd	r17, Y+3	; 0x03
    2f1a:	aa 81       	ldd	r26, Y+2	; 0x02
    2f1c:	b9 81       	ldd	r27, Y+1	; 0x01
    2f1e:	ce 0f       	add	r28, r30
    2f20:	d1 1d       	adc	r29, r1
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	ed 01       	movw	r28, r26
    2f2e:	08 95       	ret

00002f30 <_exit>:
    2f30:	f8 94       	cli

00002f32 <__stop_program>:
    2f32:	ff cf       	rjmp	.-2      	; 0x2f32 <__stop_program>
